--[[ LuaUM ]]--

----------------------------------------
--[[ description:
  -- Git commands menu.
  -- Меню команд Git.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context

local utils = require 'context.utils.useUtils'
local locale = require 'context.utils.useLocale'

----------------------------------------
local runUt = require "Rh_Scripts.Utils.Actions"

----------------------------------------
-- This menu is not for plugin panel items.
if utils.isPluginPanel() then return end

----------------------------------------
--local far = far

--------------------------------------------------------------------------------

---------------------------------------- Main data

---------------------------------------- ---- Custom
local DefCustom = {
  label = "Git",
  name = "lum",
  path = "scripts\\Rh_Scripts\\LuaPUM\\config\\",
  locale = { kind = 'load', },
  --path = "Rh_Scripts.LuaPUM.config.",
  --locale = { kind = 'require', },
} --- DefCustom

---------------------------------------- ---- Locale
local L, e1, e2 = locale.localize(DefCustom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- ---- Config
local DefCfgData = {
  -- Основные параметры:
  Path    = "",
  --Repo    = "SVN",

  --File    = "TortoiseProc.exe",
  --Status  = "SubWCRev.exe",
  --Command = "repobrowser",

  --RunNone = true,
  --ShowCmd = true,

  --MenuView = "far.Menu",
  MenuView = "RectMenu",
  ShowPath  = true,
  IconChars = true,
  ItemWidth = 25,

  -- Дополнительные параметры:
  --onClose = "/closeonend:0",

  --isWorkingCopy  = Svn.isWorkingCopy,
  --isSubversioned = Svn.isSubversioned,
} --- DefCfgData

---------------------------------------- Internal
local function FillCmdLine (Command)
  return panel.SetCmdLine(-1, Command)
end --

local runLuaMacro = runUt.Run.LuaMacro

local function FillCmdLineWithBack (Command)
  if panel.SetCmdLine(-1, Command) then
    if context.use.LFVer >= 3 then -- FAR23
    return runLuaMacro("Keys'Left'")
    else
    return runLuaMacro("Left")
    end
  end
end --

---------------------------------------- Separator
local mSeparator = {
  separator = true,
} ---

---------------------------------------- Items
local dLogGraphFormat =
  '%C(blue bold)%h%Creset %C(green bold)%ad%Creset | '..
  '%C(white)%s%Creset%C(yellow bold)%d%Creset [%C(white bold)%an%Creset]'

local mItems = {
  { text = "Git GUI",
    CmdLine = "git gui citool", },
  { text = "Fetch origin…",
    Function = FillCmdLine,
    Arguments = "git fetch origin", },
  { text = "&Commit… w/add",
    Function = FillCmdLineWithBack,
    Arguments = 'git commit -a -m ""', },
  { text = "Commit… onl&y",
    Function = FillCmdLineWithBack,
    Arguments = 'git commit -m ""', },
  { text = "P&ush to origin…",
    Function = FillCmdLine,
    Arguments = "git push origin master", },
  mSeparator,
  { text = "&Diff w/previous",
    CmdLine = "edit:<git diff HEAD", },
  { text = "Diff w&/commited",
    CmdLine = "edit:<git diff --cached", },
  { text = "Diff w&\\current",
    CmdLine = "edit:<git diff", },
  { text = "Show &log",
    CmdLine = "edit:<git log", },

  { text = "E&xtended log",
    Hint = "Press q to quit from console view",

    MenuView = DefCfgData.MenuView,

    Props = {
      --Bottom = CfgData.ShowPath and Svn.Item.View,
      RectMenu = {
        Cols = 1,
        Order = "V",
        --BoxKind = "R",
        MenuAlign = "CM",
        UncheckedChar = " ",
        MinWidth = 29, -- Hint:len()
      }, -- RectMenu
    }, -- Props

    CfgData = {
      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = false,
      },
    }, -- CfgData

    Items = {
      { text = "Log last &2 commits",
        Hint = "View last 2 commits in editor",
        CmdLine = "edit:<git log -2", },
      { text = "View log &all as tree",
        Hint = "Press q to quit from log view",
        -- %h   -- abbreviated commit hash
        -- %ad  -- author date
        -- %s   -- subject
        -- %an  -- author name
        -- %d   -- ref names
        CmdLine = 'git log --graph --all --abbrev-commit --pretty=format:"'..
                  dLogGraphFormat..'" -- ', },
      { text = "View &current history",
        Hint = "Press q to quit from log view",
        CmdLine = 'git log --graph --abbrev-commit --pretty=format:"'..
                  dLogGraphFormat..'" -- ', },
    }, -- Items
  },

  { text = "&Find changes",
    CmdLine = "edit:<git show", },
  { text = "Log &graph",
    CmdLine = "gitk", },
  mSeparator,

  { text = "&Reset / revert",

    MenuView = DefCfgData.MenuView,

    Props = {
      --Bottom = CfgData.ShowPath and Svn.Item.View,
      RectMenu = {
        Cols = 1,
        Order = "V",
        --BoxKind = "R",
        MenuAlign = "CM",
        UncheckedChar = " ",
        MinWidth = 25, -- Hint:len()
      }, -- RectMenu
    }, -- Props

    CfgData = {
      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = false,
      },
    }, -- CfgData

    Items = {
      { text = "&Fix / amend…",
        Hint = "Amend: fix last commit",
        Function = FillCmdLineWithBack,
        Arguments = 'git commit --amend -a -m ""', },
      { text = "&Clear index…",
        Hint = "Unstage: reset to head",
        Function = FillCmdLine,
        Arguments = "git reset HEAD ", },
      mSeparator,
      { text = "&Undo head…",
        Hint = "Reset to pre-head",
        Function = FillCmdLine,
        Arguments = "git reset --soft HEAD^ ", },
      { text = "&Redo head…",
        Hint = "Redo to old head",
        Function = FillCmdLine,
        Arguments = "git commit -a -c ORIG_HEAD ", },
      mSeparator,
      { text = "Reset &soft…",
        Hint = "Soft reset last commit",
        Function = FillCmdLine,
        Arguments = "git reset --soft HEAD~1 ", },
      { text = "Reset &hard…",
        Hint = "Hard reset last commit",
        Function = FillCmdLine,
        Arguments = "git reset --hard HEAD~1 ", },
      mSeparator,
      { text = "Revert…",
        Function = FillCmdLine,
        Arguments = "git revert ", },
      { text = "D&iscard changes…",
        Hint = "Checkout: discard changes",
        Function = FillCmdLine,
        Arguments = "git checkout -- ", },
    }, -- Items
  },

  { text = "&Pull from origin…",
    Function = FillCmdLine,
    Arguments = "git pull origin master", },
  mSeparator,
  { text = "Delete…",
    Function = FillCmdLine,
    Arguments = "git rm ", },
  { text = "Del for ignore…",
    Function = FillCmdLine,
    Arguments = "git rm --cached ", },
  { text = "Move…        &n",
    Function = FillCmdLine,
    Arguments = "git mv ", },
  mSeparator,
  { text = "&Tag…",
    Function = FillCmdLine,
    Arguments = "git tag -f ", },
  { text = "Tag list     &5",
    CmdLine = "git tag -l", },
  { text = "Branches     &6",
    CmdLine = "git branch -a", },
  { text = "New branch   &^",
    Function = FillCmdLine,
    Arguments = "git branch ", },
  { text = "S&witch…",
    Function = FillCmdLine,
    Arguments = "git checkout ", },
  { text = "Switch to master…",
    Function = FillCmdLine,
    Arguments = "git checkout master", },
  { text = "&Merge…",
    Function = FillCmdLine,
    Arguments = "git merge ", },
  { text = "Merge fetched…",
    Function = FillCmdLineWithBack,
    Arguments = 'git merge origin/master -m ""', },
  mSeparator,
  { text = "Rebase…",
    Function = FillCmdLine,
    Arguments = "git rebase -i ", },
  { text = "Stash…",
    Function = FillCmdLine,
    Arguments = "git stash ", },
  { text = "Stash apply…",
    Function = FillCmdLine,
    Arguments = "git stash apply", },
  { text = "Merge commit to…",
    Function = FillCmdLine,
    Arguments = "git cherry-pick ", },
  mSeparator,
  { text = "Init git here",
    CmdLine = "git init", },
  { text = "&Blame…",
    Function = FillCmdLine,
    Arguments = "git blame -w ", },
  { text = "&Add…",
    Function = FillCmdLine,
    Arguments = "git add ", },
  { text = "Clone git…",
    Function = FillCmdLine,
    Arguments = "git clone ", },
  { text = "Remote add…",
    Function = FillCmdLine,
    Arguments = "git remote add ", },
  mSeparator,
  { text = "&Help",
    Function = FillCmdLine,
    Arguments = "git help ", },
  { text = "Global config",
    CmdLine = "git config --global -l", },
  { text = "Local config",
    CmdLine = "git config -l", },
  { text = "About        &?",
    CmdLine = "git --version", },
    --CmdLine = "git gui version", },
  mSeparator,
  { text = "Status       &1",
    CmdLine = "git status", },
} --- mItems

---------------------------------------- Menu
local mGitCommands = { -- Git commands
  text = "&G - Git menu",

  Area = "panels",

  --MenuView = CfgData.MenuView,
  MenuView = DefCfgData.MenuView,

  Props = {
    --Bottom = CfgData.ShowPath and Svn.Item.View,

    RectMenu = {
      Cols = 2,
      --Cols = IsMoreCols and 2 or 1,
      Order = "V",
      --Separators = IsMoreCols and "V" or "",
      --BoxKind = "R",
      MenuAlign = "CM",
      UncheckedChar = " ",
    }, -- RectMenu

  }, -- Props

  CfgData = {

    UMenu = {
      BottomHotKeys = false,
      ReturnToUMenu = false,
    },

  }, -- CfgData

  Items = mItems,
} --- mGitCommands

---------------------------------------- Data
local Data = {
  Menu = {
    text = "&G - Git menu",
    Items = { mGitCommands, },
  },

  ["GitMenu"] = mGitCommands,
} ---

return Data
--------------------------------------------------------------------------------
