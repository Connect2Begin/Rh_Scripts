.Language=Russian,Russian (Русский)
.PluginContents=Скрипты для редактора
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #Скрипты для редактора#
  Скрипты для редактора — набор скриптов для использования в редакторе.

    ~Файлы скриптов~@Edt_ScriptFiles@

  Ссылки:
    ~Rh_Scripts~@<..\doc\>Contents@ pack

@Help
 ~Скрипты для редактора~@Contents@

@Edt_ScriptFiles
$ #Файлы скриптов#: Скрипты для редактора
    \37AutoActions.lua\-    — ¦~Авто-действия~@AutoActions@
    \37HandActions.lua\-    — ¦~Ручные действия~@HandActions@

    \37TextTemplate.lua\-   — ¦~Текстовые шаблоны~@TextTemplate@
    \37WordComplete.lua\-   — ¦~Завершение слов~@WordComplete@
    \37VoidTruncate.lua\-   — ¦~Усекатель пустоты~@VoidTruncate@

 ~Содержание~@Contents@

@AutoActions
$ #Авто-действия# (AutoActions.lua)
  AutoActions — скрипт для задания автоматических действий:

  — ~АвтоШаблоны~@AutoTemplate@ на основе скрипта ~Текстовые шаблоны~@TextTemplate@.
  — ~АвтоЗавершение~@AutoComplete@ на основе скрипта ~Завершение слов~@WordComplete@.

 ~Содержание~@Contents@

@HandActions
$ #Ручные действия# (HandActions.lua)
  HandActions — скрипт для задания "ручных" действий
в файле \37_usermenu.lua\- для плагина #LuaFAR для Редактора#:

  — ~Текстовые шаблоны~@TextTemplate@.
  — ~Завершение слов~@WordComplete@.

 ~Содержание~@Contents@

@TextTemplate
$ #Текстовые шаблоны# (TextTemplate.lua)
  TextTemplate — скрипт для вставки текстовых шаблонов.
 Скрипт позволяет заменить набранный текст другим текстом по шаблону.
Шаблоны хранятся отдельно для каждого типа файла в виде lua‑таблиц в файлах.

    ~Параметры скрипта~@TT_Props@
    ~Привязка типов~@TT_TypeBind@
    ~Задание шаблонов~@TT_TplDefine@

 ~Содержание~@Contents@

@AutoTemplate
  АвтоШаблоны используют скрипт ~Текстовые шаблоны~@TextTemplate@.

 ~Содержание~@Contents@

@TT_Props
$ #Параметры скрипта#: TextTemplate
  Скрипт имеет свойства, позволяющие настроить параметры его работы.
Они аналогичны свойствам набранного слова скрипта ~Завершение слов~@WordComplete@.

    ~Свойства набранного слова~@WC_Props_Word@

 ~Содержание~@Contents@     ~Текстовые шаблоны~@TextTemplate@

@TT_TypeBind
$ #Привязка типов#: TextTemplate
  Привязка типов к файлам шаблонов задаётся в файле \37kit_config.lua\-.

    \1FПримеры полей\- таблицы \37Data\- в \37kit_config.lua\-:
  \37lua     = \3Atrue\3F,  \37--\- Файл lua.lua с шаблонами для типа lua
  \37ini     = \3Atrue\3F,  \37--\- Файл ini.lua с шаблонами для типа ini
  \37reg     = 'ini'\3F, \37--\- Использование файла ini.lua для типа reg

  В пакет включён образец файла \37kit_config.lua\-.
В нём в виде комментариев уже указаны основные типы файлов.

 ~Содержание~@Contents@     ~Текстовые шаблоны~@TextTemplate@

@TT_TplDefine
$ #Задание шаблонов#: TextTemplate
  Файлы шаблонов по умолчанию находятся в папке \37TextTemplate\-.
В этой папке уже есть \37*.lua.example\- — примеры файлов шаблонов.

    \1FФормат полей\- таблицы \37Data\- в файле шаблонов:
    \3F{\37 <параметры шаблона> \3F},\-

    \1FПример\- таблицы \37Data\-:
  \3Flocal\37 Data = \3F{\-
    \37--\- Настройки для типа:
    \3ACharEnum\37 = "%S"\3F,\-
    \3ACharsMin\37 = 3\3F,\-
    \37--\- Текстовые шаблоны:
    \3Ainherit\37 = \3Atrue\3F, --\- Наследование шаблонов по типу
    \3Aregex\37 = \3Afalse\3F; --\- Общий параметр для всех шаблонов
      \37--\- Тестовые шаблоны:
    \3F{ \3Afind\37 = "(text)"\3F, \3Aplain\37 = '%1%1'\3F, \3Aregex\37 = true \3F},\-
    \3F{ \3Afind\37 = "<>"\3F,     \3Amacro\37 = '@@Left'\3F, \3Aadd\37 = true \3F},\-
  \3F} \37--\-- Data

  #Описание параметров#, общих для типа:
    \37CharEnum\- и т.п.: параметры аналогичны ~параметрам скрипта~@TT_Props@.
  Если они не заданы, используются значения по умолчанию.
Всегда указывайте значения для всех параметров, если значение параметра
\37CharEnum\- не совпадает с соответствующим значением в параметрах скрипта.
    \37inherit\-   (bool) — признак наследования шаблонов по типу
(по умолчанию nil): nil/true — да, false — нет.
    \37regex\-            — см. аналогичный параметр для шаблона.

  #Описание параметров# шаблона:
    \37regex\-     (bool) — ¦использование регулярных выражений
(по умолчанию "lua"): nil/true — да, false — нет.
    \37     \-   (string) — ¦вид регулярных выражений: "none", "lua", "far".
    \37add\-       (bool) — ¦добавление текста вместо замены.
    \37find\-    (string) — ¦строка поиска.
    \37plain\-   (string) — ¦обычный шаблон для замены.
    \37macro\-   (string) — ¦макро-шаблон для замены.
    \37apply\-   (string) — ¦~функция формирования замены~@TT_TplApply@.
  Параметры, используемые только с \37apply\-:
    \37replace\- (string) — ¦предварительный шаблон для функции замены.
Если \37replace\- не указан, используется часть набранного слова до позиции курсора.
    \37param\-      (any) - ¦параметр, передаваемый в функцию замены.
    \37params\-   (table) - ¦таблица-массив параметров,
передаваемых в функцию замены в распакованном виде.
    \37as\-      (string) — ¦вид обработки результата функции
(по умолчанию "macro"): "plain" — как обычный шаблон, "macro" — как макро-шаблон.

  Для определения таблиц шаблонов используется наследование типов.
Поиск подходящего шаблона выполняется в порядке задания шаблонов в таблице.
Если функция \37apply\- возвращает \37false\-, используется
следующий шаблон из списка предварительно найденных подходящих шаблонов.

 ~Содержание~@Contents@     ~Текстовые шаблоны~@TextTemplate@

@TT_TplApply
$ #Функция формирования замены#: TextTemplate
  Функция формирования замены — обычная функция Lua.
    \37local function (Cfg, ...)\-
    \37--\- Вместо многоточия указываются реальные параметры.
  или
    \37local function (Cfg, param)\-

  Параметры:
    \37Cfg\- (table) — ¦информация о шаблоне,
    \37...\-   (any) — список значений массива ~params~@TT_TplDefine@,
  или
    \37param\- (any) — значение параметра ~param~@TT_TplDefine@.

  Результат:
    \37nil\- или \37false\- — не выполнять замену.
    \37string\- — вставить строку как макро-шаблон.

  #Поля таблицы# \37Cfg\-:
    \37Template\- (table) — ¦информация о текущем шаблоне. Поля:
        \37regex\-             — ¦см. аналогичный ~параметр шаблона~@TT_TplDefine@.
        \37Find\-     (string) — ¦использованная строка поиска.
        \37Pos\-      (number) — ¦позиция вхождения.
        \37Result\-   (string) — ¦строка с предварительным шаблоном.
        \37Tpl\-       (table) — ¦информация о ~параметрах шаблона~@TT_TplDefine@.
    \37Current\-  (table) — ¦информация о применении шаблона. Поля:
        \37FileType\- (string) — ¦тип текущего файла.
        \37Line\-     (string) — ¦текущая строка в редакторе.
        \37Word\-     (string) — ¦набранное слово в текущей строке.
        \37Slab\-     (string) — ¦часть набранного слова до позиции курсора.
        \37Frag\-     (string) — ¦часть текущей строки до позиции курсора.
        \37Pos\-      (number) — ¦позиция следующего символа (нумерация от 1).
        \37Delete\-   (string) — ¦удаляемая часть текста при \37add ~~= true\-.

  Параметры можно также передавать как поля в параметрах шаблона.
Доступ к ним можно получить через поле \37Template.Tpl\- таблицы \37Cfg\-.

 ~Содержание~@Contents@     ~Текстовые шаблоны~@TextTemplate@

@WordComplete
$ #Завершение слов# (WordComplete.lua)
  WordComplete — скрипт для завершения слов, набираемых в редакторе.
 Скрипт позволяет выбрать слово из списка имеющихся в файле слов,
начинающихся с уже набранных символов в позиции курсора.

    ~Управление завершением~@WC_Control@
      ~Назначение клавиш~@WC_KeyAssign@

    ~Параметры скрипта~@WC_Props@
      ~Свойства набранного слова~@WC_Props_Word@
      ~Свойства отбора слов~@WC_Props_Find@
      ~Свойства сортировки~@WC_Props_Sort@
      ~Свойства списка слов~@WC_Props_List@
      ~Свойства завершения слова~@WC_Props_Cmpl@

    #Подробности о скрипте#
      ~Алгоритм работы~@WC_Algorithm@

 ~Содержание~@Contents@

@AutoComplete
  АвтоЗавершение использует скрипт ~Завершение слов~@WordComplete@.

 ~Содержание~@Contents@

@WC_Algorithm
$ #Алгоритм работы#: WordComplete
  #Основные этапы алгоритма#:
  1. ¦Конфигурирование.
    1. ¦Управление настройками.
    2. ¦Формирование начального списка.
  2. ¦Управление списком.
    1. ¦Обработка нажатия клавиши.
      — ¦Предварительный анализ клавиши.
      — ¦Учёт нажатия клавиши-символа.
      — ¦Формирование нового списка слов.
    2. Выполнение выбранного действия.
      — ¦Анализ выбранного действия.
      — ¦Завершение слова \1F*\-.

\1F*\- Этап зависит от выбранного действия.

  ~Алгоритм формирования меню~@WC_Alg_MenuMake@

 ~Содержание~@Contents@     ~Завершение слов~@WordComplete@

@WC_Alg_MenuMake
$ #Алгоритм формирования меню#: WordComplete
  #Шаги формирования меню#:
  1. ¦Анализ текущего набранного слова.
    1. ¦Получение слова под курсором.
    2. ¦Анализ позиции относительно слова.
  2. ¦Сбор подходящих слов для завершения.
    1. ¦Подготовка слова для поиска.
    2. ¦Поиск слов, подходящих к текущему.
  3. ¦Сортировка собранных слов.
    1. ¦Корректировка вида сортировки.
    2. ¦Необходимая сортировка слов.
  4. ¦Подготовка списка-меню слов.
      — ¦Поиск общей части слов.
    1. ¦Создание таблицы пунктов меню.
    2. ¦Задание параметров меню RectMenu.

  ~Алгоритм работы~@WC_Algorithm@

 ~Содержание~@Contents@     ~Завершение слов~@WordComplete@

@WC_Control
$ #Управление завершением#: WordComplete
  Завершение слова может использовано двумя способами:
  — замена: ¦удаляются символы слова справа от курсора,
а затем выполняется добавление выбранного слова;
  — вставка: ¦осуществляется добавление выбранного слова в позицию курсора,
но символы слова справа от курсора остаются.
  Добавление выбранного слова зависит от параметра ~TailOnly~@WC_Props_Cmpl@.

  Клавиши завершения слова в зависимости от способа:
  — замена: ¦\37Enter\-, \37NumEnter\-, \37Tab\-;
  — вставка: ¦\37Shift-Enter\-, \37Shift-NumEnter\-, \37Shift-Tab\-.

  Кроме того, есть специальный режим добавления общей части слов списка.
После добавления общей части список слов не закрывается, а обновляется.
Режим добавления общей части зависит от способов завершения и #TailOnly#.

  Добавление общей части по умолчанию назначено на следующие клавиши:
  — замена: ¦\37Ctrl-Enter\- / \37Ctrl-NumEnter\-;
  — вставка: ¦\37Ctrl-Shift-Enter\- / \37Ctrl-Shift-NumEnter\-.

  ~Назначение клавиш~@WC_KeyAssign@

 ~Содержание~@Contents@     ~Завершение слов~@WordComplete@

@WC_KeyAssign
$ #Назначение клавиш#: WordComplete
  Клавиши можно задать пока только в файле конфигурации скрипта.
Для его создания откройте окно настроек скрипта и нажмите Enter.
В каталоге скрипта будет создан файл \37WordComplete.cfg\-.
Он будет включать ~шесть~@WC_Control@ назначенных по умолчанию клавиш.

    \1FПример\- добавления новых клавиш:

 — Клавиши завершения слов:
 \3Fdo local\37 t = {}; Data["WordComplete"]["Menu"]["CKeys"] = t\-
   \3Fdo local\37 t = {}; Data["WordComplete"]["Menu"]["CKeys"][\3A5\37] = t\-
     \37t["BreakKey"] = "\3AS+Space\37" --\- Клавиша: Shift-Space
     \37t["Action"] = "\3AReplace\37"   --\- Добавление выбранного слова путём замены
   \3Fend\-
 \3Fend\-

 — Клавиши локальных действий:
 \3Fdo local\37 t = {}; Data["WordComplete"]["Menu"]["LKeys"] = t\-
   \3Fdo local\37 t = {}; Data["WordComplete"]["Menu"]["LKeys"][\3A3\37] = t\-
     \37t["BreakKey"] = "\3ACS+Space\37"    --\- Клавиша: Ctrl-Shift-Space
     \37t["Action"] = "\3AReplace\37" --\- Добавление путём замены
     \37t["Effect"] = "\3AShared\37"  --\- только общей части слов
   \3Fend\-

   \3Fdo local\37 t = {}; Data["WordComplete"]["Menu"]["LKeys"][\3A4\37] = t\-
     \37t["BreakKey"] = "\3AInsert\37"      --\- Клавиша: Insert
     \37t["Action"] = "\3AInsert\37"  --\- Добавление путём замены
     \37t["Effect"] = "\3AShared\37"  --\- только общей части слов
   \3Fend\-
 \3Fend\-

  ~Управление завершением~@WC_Control@

 ~Содержание~@Contents@     ~Завершение слов~@WordComplete@

@WC_Props
$ #Параметры скрипта#: WordComplete
  Скрипт имеет много свойств, позволяющих
настроить параметры его работы на разных этапах выполнения.
  Окно настройки скрипта позволяет задать не все параметры.

    ~Свойства набранного слова~@WC_Props_Word@
    ~Свойства отбора слов~@WC_Props_Find@
    ~Свойства сортировки~@WC_Props_Sort@
    ~Свойства списка слов~@WC_Props_List@
    ~Свойства завершения слова~@WC_Props_Cmpl@

 ~Содержание~@Contents@     ~Завершение слов~@WordComplete@

@WC_Props_Word
$ #Свойства набранного слова#: WordComplete
  #CharEnum# (string) — ¦Допустимые символы слова.
  — ¦Символы задаются в стиле регулярных выражений Lua.
  — ¦По умолчанию: "\37%w_\-" (буквы, цифры и символ подчёркивания).

  #CharsMin# (number) — ¦Минимальное число символов.
    ¦Минимальное число символов набранного слова для завершения.

  #UseMagic# (bool) — Использование "магических" модификаторов.
    ¦"Магические" символы-модификаторы Lua — "\37?*+-\-":
    · ¦применяются вместе с #CharEnum# при анализе текущего слова.
    · ¦используются в шаблоне поиска при отборе подходящих слов.
    · ¦исключаются из символов-завершителей ~Trailers~@WC_Props_Cmpl@.

  #UsePoint# (bool) — Использование символа '\37.\-' как "магического".
  — ¦Применяется только совместно с #UseMagic#.
  — ¦При истинном значении параметра символ '\37.\-':
    · ¦считается "магическим" символом.
    · ¦исключается из символов-завершителей #Trailers#.
  — ¦При ложном значении параметра:
    · ¦символ '\37.\-' считается обычным символом.
    · ¦при #UseMagic# \37== true\- в шаблоне поиска слов
перед модификаторами автоматически ставится '\37.\-'.

  #UseInside# (bool) — Использование внутри слов.
    ¦Позволяет вывести список слов при нахождении внутри набранного слова.

  #UseOutside# (bool) — Использование вне слов.
    ¦Позволяет вывести список ближайших слов при отсутствии набранного слова.

 ~Содержание~@Contents@     ~Параметры скрипта~@WC_Props@

@WC_Props_Find
$ #Свойства отбора слов#: WordComplete
  #FindKind# (string) — Вид поиска слов.
    ¦Определяет порядок поиска слов:
  — \37"customary"\- — ¦обычный: поиск ведётся вверх по файлу, затем вниз.
  — \37"unlimited"\- — ¦неограниченный: не учитывается ограничение #FindsMax#.
  — \37"alternate"\- — ¦чередующийся: одновременный поиск вверх / вниз.
  — \37"trimmable"\- — ¦балансируемый: поиск ведётся вверх по файлу
до нахождения #FindsMax#\37/2\- слов, затем также вниз.
    ¦#FindKind# и ~SortKind~@WC_Props_Sort@ совместно задают содержимое списка слов.

  #FindsMax# (number) — Максимальное число слов для отбора.
    ¦Максимальное число слов, после нахождения которых поиск прекращается.

  #MinLength# (number) — Минимальная длина слова.
    ¦Минимальное число символов слова, включаемого в список слов.

  #MatchCase# (bool) — Учёт регистра символов.
    ¦Позволяет искать слова с учётом регистра символов набранного слова.

  #LinesUp# и #LinesDown# (number) — Число анализируемых строк.
    ¦Определяет максимальное число строк для анализа:
  — #LinesUp# — при поиске слов в строках выше текущей строки.
  — #LinesDown# — при поиске слов в строках ниже текущей строки.

 ~Содержание~@Contents@     ~Параметры скрипта~@WC_Props@

@WC_Props_Sort
$ #Свойства сортировки#: WordComplete
  #SortKind# (string) — Вид сортировки слов.
    ¦Определяет порядок слов в списке:
  — \37"searching"\- — по нахождению, т.е. по мере поиска.
  — \37"character"\- — по алфавиту, т.е. посимвольно.
  — \37"closeness"\- — по близости (к текущей строке).
  — \37"frequency"\- — по встречаемости, т.е. по частотности.
    ¦~FindKind~@WC_Props_Find@ и #SortKind# совместно задают содержимое списка слов.

  #SortsMin# (number) — Минимальное число слов для сортировки.
    ¦Минимальное число слов списка, необходимых для выполнения сортировки.

 ~Содержание~@Contents@     ~Параметры скрипта~@WC_Props@

@WC_Props_List
$ #Свойства списка слов#: WordComplete
  #ListsMax# (number) — Максимальное число слов в списке.
    ¦Максимальное число слов, выводимых в список.

  #SlabMark# (bool) — Маркировка набранного слова.
    ¦Позволяет маркировать символы набранного слова в словах списка.

  #HotChars# (bool) — Выбор слова с помощью \37Alt+\-<горячая буква>.
  — Задаёт для слов списка горячие буквы: \371-9, 0, a-z\-.
  — Позволяет выбирать слово нажатием \37Alt+\-<назначенная буква>.

  #ActionAlt# (bool) — Использование \37Alt+\-<клавиша> для действий.
    ¦Позволяет выполнить некоторые действия при нажатом Alt:
  — ¦перемещение по тексту: влево/вправо, вверх/вниз.
  — ¦удаление символа под курсором и слева от курсора.

  #EmptyList# и #EmptyStart# (bool) — Возможность пустого списка.
  — ¦Позволяют вывести список без слов.
  — ¦Упрощают исправление ошибочного набора символов.
  — ¦#EmptyStart# относится только к первому показу списка.

 ~Содержание~@Contents@     ~Параметры скрипта~@WC_Props@

@WC_Props_Cmpl
$ #Свойства завершения слова#: WordComplete
  #Trailers# (string) — Символы-завершители.
  — ¦Определяет символы, при вводе которых добавляется выбранное слово.
  — ¦Введённый символ вставляется после добавления выбранного слова.

  #UndueOut# (bool) — Отмена завершения при неподходящих клавишах.
    ¦Позволяет закрыть список слов при нажатии необрабатываемых клавиш.

  #LoneAuto# (bool) — Автозавершение при одном слове.
    ¦Позволяет автоматически ввести слово, если оно только одно в списке.

  #TailOnly# (bool) — Добавление ненабранной части слова.
  — ¦Позволяет добавить только ненабранные символы слова.
  — ¦Сохраняется регистр уже набранных символов слова.

 ~Содержание~@Contents@     ~Параметры скрипта~@WC_Props@

@VoidTruncate
$ #Усекатель пустоты# (VoidTruncate.lua)
  VoidTruncate — небольшой скрипт для удаления концевых пробелов в строках.
 Он включает в себя таблицу \37Truncate\- из следующих функций:
    \37Spaces\-     — ¦Усечение конечных пробелов в заданной строке.
    \37UpdateEnd\-  — ¦Обновление позиции курсора для конца строки.
    \37Line\-       — ¦Усечение конечных пробелов в текущей строке.
    \37Text\-       — ¦Усечение конечных пробелов во всех строках текста.
    \37File\-       — ¦Усечение пустых строк в конце файла.
    \37FileText\-   — ¦Выполнение \37File\-, \37Line\- и \37UpdateEnd\-.

  Функция скрипта \37ProcessEditorInput\- выполняет следующее:
  — ¦усечение конечных пробелов по нажатию \37(Alt-)(Shift-)End\-.
  — ¦усечение пустых строк в конце файла (кроме одной)
и конечных пробелов в последней строке по \37(Alt-)Ctrl-(Shift-)End\-.
  Эта функция предназначена для использования в \37MakeResident\-.

  \34Внимание\-: ¦Не используйте функцию, если конечные пробелы
и пустые строки в конце файла являются существенной частью хранимых данных.
Их усечение может привести к потере или искажению информации.

 ~Содержание~@Contents@
