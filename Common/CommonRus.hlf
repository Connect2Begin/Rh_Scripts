.Language=Russian,Russian (Русский)
.PluginContents=Общие скрипты
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #Общие скрипты#
  Общие скрипты — набор скриптов для использования в утилитах.

    ~Файлы скриптов~@Cmn_ScriptFiles@

  Ссылки:
    ~Rh_Scripts~@<..\doc\>Contents@ pack

@Help
 ~Общие скрипты~@Contents@

@Cmn_ScriptFiles
$ #Файлы скриптов#: Общие скрипты
    \37CustomMenu.lua\-     — ¦~Настраиваемое меню~@CustomMenu@.
    \37FilterMenu.lua\-     — ¦~Фильтрационное меню~@FilterMenu@.
    \37MenuCaller.lua\-     — ¦~Вызыватель меню~@MenuCaller@ выбранного вида.
    \37MenuTexter.lua\-     — ¦~Формирователь текста~@MenuTexter@ пунктов меню.

    \37Calendar.lua\-       — ¦~Календарь на один месяц~@Calendar@.
    \37CharsMenu.lua\-      — ¦Меню из пунктов для вывода символов@CharsMenu@.

    \37rhsConfig.lua\-      — ¦~Конфигуратор~@rhsConfig@ пакета Rh_Scripts.

 ~Содержание~@Contents@

@CustomMenu
$ #Настраиваемое меню# (CustomMenu)
  CustomMenu — вид меню на основе таблиц Lua (с пользовательским меню).
 Используется в ~LUM~@<..\LuaUM\>Contents@ для вывода загруженной таблицы
и работы с ним.

    #Основные ссылки#
      ~Управление меню~@<..\LuaUM\>LUM_Control@
      ~Пункты таблицы‑меню~@<..\LuaUM\>LUM_MenuItems@

 ~Содержание~@Contents@

@FilterMenu
$ #Фильтрационное меню# (FilterMenu)
  FilterMenu — вид меню с возможностью фильтрации пунктов меню.
 Фильтрация выполняется при нажатии пользователем в меню клавиш-символов.
Если пункт меню удовлетворяет условиям фильтра, то он выводится в меню.

  Параметры функции вывода меню аналогичны параметрам функции far.Menu().
Свойства FilterMenu задаются как поля таблицы Filter параметра Properties.

    ~Свойства меню~@FM_Props@

 ~Содержание~@Contents@

@FM_Props
$ #Свойства меню#: FilterMenu
  #Pattern# (string) — ¦Начальный шаблон фильтрации.

  #CharsText# (string) — ¦Формат вывода строки-шаблона фильтрации.
  — ¦По умолчанию: \37*[%s]\-
  — ¦Шаблон выводится в заголовок меню.

  #ItemsText# (string) — ¦Формат вывода числа выведенных пунктов меню
из общего числа имеющихся пунктов меню.
  — По умолчанию: \37(%d / %d)\-
  — ¦Числа выводятся в нижнюю строку меню.

  #CheckText# (string) — ¦Формат вывода имени используемого фильтра.
  — ¦По умолчанию: \37[%s]\-
  — Имя фильтра выводится в нижнюю строку меню.

  #ShowCheck# (bool) — ¦Признак вывода имени используемого фильтра.

  #CheckItem# — ¦~Информация для проверки пункта меню~@FM_Props_Check@
на предмет фильтрации.

 ~Содержание~@Contents@     ~Фильтрационное меню~@FilterMenu@

@FM_Props_Check
$ #Проверка пункта меню#: FilterMenu
  Информация для проверки пункта меню на предмет фильтрации
может быть представлена различным образом:

  1. #function# — ¦функция проверки ~заданного формата~@FM_Props_CheckItem@.
    ¦При этом способе функция должна выполнять полную проверку
переданных ей параметров и формировать правильный результат.

  2. #string# — ¦имя ~стандартной функции проверки~@FM_Props_CheckStds@.
    ¦Перед вызовом функции выполняется проверка на наличие шаблона,
а параметр-текст приводится к нижнему регистру.

  3. #table# — ¦таблица с ~параметрами фильтрации~@FM_Props_CheckArgs@.
    ¦В этом случае создаётся функция-оболочка, в которой:
  — ¦применяются все указанные в таблице параметры фильтрации,
  — ¦вызывается функция, заданная в #CheckItem# способами 1 или 2.

    ~Параметры фильтрации~@FM_Props_CheckArgs@
    ~Формат функции проверки~@FM_Props_CheckItem@
    ~Стандартные функции проверки~@FM_Props_CheckStds@

 ~Содержание~@Contents@     ~Свойства меню~@FM_Props@

@FM_Props_CheckArgs
$ #Параметры фильтрации#: FilterMenu
  #CheckItem# (string, function) — ¦~Функция проверки~@FM_Props_Check@.

  Остальные параметры в порядке использования в функции:

  #Sub# (string) — Шаблон подстроки для текста пункта.
  — ¦Задаёт шаблон подстроки, сравниваемой с шаблоном фильтрации.
  — ¦Позволяет отобрать часть текста, участвующую в фильтрации.
  — ¦Применяется при изменяющейся позиции выбираемой подстроки.
  — ¦Если подстроки нет, используются описанные ниже параметры.

  #Pos# и #End# (number) - Позиции подстроки для текста пункта.
  — ¦Задают позиции подстроки текста, сравниваемой с шаблоном.
  — ¦Позволяют отобрать часть текста, участвующую в фильтрации.
  — ¦Применяется при фиксированной позиции выбираемой подстроки.

  #Left# и #Right# (string) — Части шаблона фильтрации.
  — ¦Добавляются в начало и конец шаблона.
  — ¦Позволяют не вводить постоянную часть шаблона.

  #MatchCase# (bool) — ¦Признак сравнения с учётом регистра.

  #Name# (string) — ¦Имя фильтра для отображения в меню.

 ~Содержание~@Contents@     ~Проверка пункта меню~@FM_Props_Check@

@FM_Props_CheckItem
$ #Формат функции проверки#: FilterMenu
  \37--[[\- Параметры:
    Text - текст пункта меню.
    Pattern - шаблон фильтрации.
    Item - текущий пункт меню.
  \37--]]\-
  \37function\- <Название> \37(Text, Pattern, Item) --> (pos, end | nil)\-
    \37--\- Обработка \37--\-
    \37--\- Вернуть nil, если пункт не удовлетворяет условиям, иначе:
    \37return fpos, fend --\- Позиции для маркирования текста пункта меню
  \37end --\-

 ~Содержание~@Contents@     ~Проверка пункта меню~@FM_Props_Check@

@FM_Props_CheckStds
$ #Стандартные функции проверки#: FilterMenu
  #plain# — ¦Обычная проверка текста на обычный шаблон.
    ¦Шаблон считается обычным текстом. Функция применяется по умолчанию.

  #pattern# — ¦Простая проверка текста на шаблон Lua.
    ¦Шаблон считается регулярным выражением Lua.

  #dos# — ¦Стандартная проверка путей, имён файлов и каталогов на шаблон.
    ¦Шаблон считается выражением со специальными символами подстановки:
  \37?\- — один символ, \37*\- — ноль или большее число символов.

 ~Содержание~@Contents@     ~Проверка пункта меню~@FM_Props_Check@

@MenuCaller
$ #Вызыватель меню выбранного вида# (MenuCaller)
  MenuCaller — вид меню для загрузки скрипта с выбранным видом меню
и запуска этого меню с заданными параметрами.

  Первые 3 параметра функции вывода меню аналогичны параметрам функции far.Menu().
Дополнительный 4‑й параметр позволяет задать функцию вызова меню.

  Свойства MenuCaller задаются как поля таблицы Caller параметра Properties.

 ~Содержание~@Contents@

@MenuTexter
$ #Формирователь текста пунктов меню# (MenuTexter)
  MenuTexter — вид меню с заданием необходимого формата текста пунктов меню.

  Первые 3 параметра функции вывода меню аналогичны параметрам функции far.Menu().
Дополнительный 4‑й параметр позволяет задать функцию вызова меню
(при значении \37nil\- используется far.Menu).
Если параметр равен \37false\-, то возвращается таблица пунктов меню.
(В остальных случаях также возвращается таблица пунктов меню.)

  Свойства MenuTexter задаются как поля таблицы Texter параметра Properties.
Свойства меню@TM_Props@ аналогичны свойствам отображения пользовательского
меню (см. раздел "Текст пунктов меню"@<..\LuaUM\>LUM_config@).

 ~Содержание~@Contents@

@Calendar
$ #Календарь на один месяц# (Calendar)
  Calendar — скрипт для вывода календаря на один месяц.

  Слева отображается область с информацией о дате, слева — собственно календарь.
  В области с информацией о дате слева от полного названия дня недели
выводится номер дня года, справа — номер недели года, сверху — дата в формате
\3AГГГГ‑ММ‑ДД\-, снизу для текущей даты — время в формате \3AЧЧ‑ММ‑СС\-.
  Для календаря на первой строке выводится номер недели месяца,
на последней строке — номер недели года, справа — названия дней недели.

  Для навигации могут использоваться следующие клавиши:
 \37Num* | Clear\- (Num5)    — ¦текущие дата и время.
 \37Alt+(Left|Right)\-       — ¦предыдущий/следующий месяц.
 \37Alt+(Up|Down)\-          — ¦предыдущий/следующий год.
 \37Alt+(PgUp|PgDn)\-        — ¦начало/конец месяца.
 \37Alt+(Home|End)\-         — ¦начало/конец года.

 \37Num/\-                   — ¦переход в режим ~ввода даты~@Calendar_Input@.

 \37Ctrl+(PgUp|PgDn)\-       — ¦начало/конец десятилетия
(если не было выбрано — текущего, затем начало предыдущего / конец следующего).
 \37Ctrl+(Home|End)\-        — ¦начало/конец века (столетия)
(если не было выбрано — текущего, затем начало предыдущего / конец следующего).
 \37Ctrl+Alt+(PgUp|PgDn)\-   — ¦начало/конец тысячелетия
(если не было выбрано — текущего, затем начало предыдущего / конец следующего).
 \37Ctrl+Alt+(Clear)\-       — ¦начало / конец 1‑го года (н.э.) (переключатель).
 \37Ctrl+Alt+(Home|End)\-    — ¦начало -9999‑го года / конец 9999‑го года (н.э.).

    Реализованные ~конфигурации календаря~@<..\Utils\>DateTime_Config@

 ~Содержание~@Contents@

@Calendar_Input
$ #Календарь на один месяц#: Ввод даты

  Ввод даты выполняется в форматах \3AГ\-, \3AГ‑М\- или \3AГ‑М‑Д\-,
где \3AГ\-, \3AМ\- и \3AД\- — числа, представляющие соответственно
вводимые год, месяц и день. Пропущенные значения заменяются на \3A1\-.

  Для ввода даты используются следующие клавиши:
 \371—9, 0\- (цифры)         — ¦ввод цифр даты.
 \37Num1—Num9\- (Num‑цифры)  — ¦ввод цифр даты при включённом NumLock.
 \37‑, Num‑\-                — ¦ввод разделителя частей даты.
 \37Num/, Enter, NumEnter\-  — ¦завершение ввода даты.

  После завершения ввода введённая дата будет показана в окне.

 ~Содержание~@Contents@     ~Календарь на один месяц~@Calendar@

@rhsConfig
$ #Конфигуратор пакета Rh_Scripts# (rhsConfig)
  rhsConfig — скрипт для настройки компонентов пакета Rh_Scripts.
 Он позволяет выбрать только необходимые пункты меню
и резидентные модули — автоматические обработчики действий.
  Файл \37rhsConfig.cfgrus\- — пример конфигурации с русскими названиями
пунктов меню. Для его использования переименуйте файл в \37rhsConfig.cfg\-.

    ~Пункты меню~@<..\doc\>RhS_LFE_MenuItems@
    ~Обработчики~@<..\doc\>RhS_LFE_Handlers@
    ~Названия пунктов~@rhsConfig_Title@

  \34Внимание\-: ¦Резидентные модули выполняются автоматически
при совершении пользователем определённых действий.
Такое выполнение может привести к потере или искажению информации.
Поэтому перед использованием резидентных модулей
внимательно прочтите описание выполняемых ими операций.

 ~Содержание~@Contents@

@rhsConfig_Title
$ #Названия пунктов#: rhsConfig
  Особенности использования названий:
 — ¦Для задания названия пункта по умолчанию удалите текущее название этого пункта.
 — ¦Для исключения пункта из меню LuaFAR для Редактора используйте строку из одного пробела.

 ~Содержание~@Contents@     ~Конфигуратор Rh_Scripts~@rhsConfig@
