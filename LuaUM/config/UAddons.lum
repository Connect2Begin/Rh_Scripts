--[[ LuaUM ]]--

----------------------------------------
--[[ description:
  -- Addon scripts.
  -- Скрипты-дополнения.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local locale = require 'context.utils.useLocale'

--------------------------------------------------------------------------------
local unit = {}

---------------------------------------- Custom
local Custom = {
  label = "Others",
  name = "lum",
  path = "Rh_Scripts.LuaUM.config.",
  locale = { kind = 'require', },
} ---

---------------------------------------- Locale
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Separator
local mSeparator = {
  separator = true,
} ---

---------------------------------------- Calendar
function unit.CalendarTerra ()
  local datim = require "Rh_Scripts.Utils.DateTime"
  local Calendar = require "Rh_Scripts.Common.Calendar"
  local cfgWorld = require "Rh_Scripts.Utils.DateTime.Terra"
  --logShow(cfgWorld, "Terra Config", "w d2")
  
  local dt = os.date("*t")

  local Config = datim.newConfig(cfgWorld.TConfig)
  local Data = {
    Config = Config,
    Date = datim.newDate(dt.year, dt.month, dt.day, Config),
    Time = datim.newTime(dt.hour, dt.min, dt.sec, Config),
    YearMin = -9998,
    YearMax =  9999,
  } --- Data

  return {
    text = L.AdnCalendarTerra,
    Function = Calendar.Execute,
    Arguments = Data,
  } ----
end ---- CalendarTerra

function unit.CalendarMillo ()
  local datim = require "Rh_Scripts.Utils.DateTime"
  local Calendar = require "Rh_Scripts.Common.Calendar"
  local cfgWorld = require "Rh_Scripts.Utils.DateTime.Millo"
  --logShow(cfgWorld, "Millo Config", "w d2")

  local Config = datim.newConfig(cfgWorld.TConfig)
  local Data = {
    Config = Config,
    Date = datim.newDate(2, 1, 13, Config),
    Time = datim.newTime(3, 8, 0, Config),
    YearMin = -999,
    YearMax = 1000,
  } --- Data

  return {
    text = L.AdnCalendarMillo,
    Function = Calendar.Execute,
    Arguments = Data,
  } ----
end ---- CalendarMillo

function unit.CalendarHekso ()
  local datim = require "Rh_Scripts.Utils.DateTime"
  local Calendar = require "Rh_Scripts.Common.Calendar"
  local cfgWorld = require "Rh_Scripts.Utils.DateTime.Hekso"
  --logShow(cfgWorld, "Hekso Config", "w d2")
  
  local dt = os.date("*t")

  local Config = datim.newConfig(cfgWorld.TConfig)
  local Data = {
    Config = Config,
    Date = datim.newDate(dt.year, dt.month, dt.day, Config),
    Time = datim.newTime(dt.hour, dt.min, dt.sec, Config),
    YearMin = -9998,
    YearMax =  9999,
  } --- Data

  return {
    text = L.AdnCalendarHekso,
    Function = Calendar.Execute,
    Arguments = Data,
  } ----
end ---- CalendarHekso

function unit.CalendarMinimum ()
  local datim = require "Rh_Scripts.Utils.DateTime"
  local Calendar = require "Rh_Scripts.Common.Calendar"
  local cfgWorld = require "Rh_Scripts.Utils.DateTime.Minimum"
  --logShow(cfgWorld, "Minimum Config", "w d2")
  
  local dt = os.date("*t")

  local Config = datim.newConfig(cfgWorld.TConfig)
  local Data = {
    Config = Config,
    Date = datim.newDate(dt.year, dt.month, dt.day, Config),
    Time = datim.newTime(dt.hour, dt.min, dt.sec, Config),
    YearMin = -9998,
    YearMax =  9999,
  } --- Data

  return {
    text = L.AdnCalendarMinimum,
    Function = Calendar.Execute,
    Arguments = Data,
  } ----
end ---- CalendarMinimum

function unit.CalendarPern ()
  local datim = require "Rh_Scripts.Utils.DateTime"
  local Calendar = require "Rh_Scripts.Common.Calendar"
  local cfgWorld = require "Rh_Scripts.Utils.DateTime.Pern"
  --logShow(cfgWorld, "Pern Config", "w d2")

  local Config = datim.newConfig(cfgWorld.TConfig)
  local Data = {
    Config = Config,
    Date = datim.newDate(2508, 1, 1, Config),
    Time = datim.newTime(0, 0, 0, Config),
    YearMin = -200,
    YearMax = 5000,
  } --- Data

  return {
    text = L.AdnCalendarPern,
    Function = Calendar.Execute,
    Arguments = Data,
  } ----
end ---- CalendarPern

---------------------------------------- Calendars
local mCalendars = {
  text = L.AdnCalendars,
  Items = {
    unit.CalendarMillo,
    unit.CalendarHekso,
    unit.CalendarMinimum,
    mSeparator,
    unit.CalendarPern,
  } ---
} --- mCalendars

---------------------------------------- Items/Menu
local mScripts = {
  text = L.AddonScripts,
  Items = {
    unit.CalendarTerra,
    mSeparator,
    mCalendars,
  } ---
} --- mScripts

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.OtherScripts,
    Items = { mScripts, },
  },

  --["Addon Scripts"] = mScripts,
} ---

return Data
--------------------------------------------------------------------------------
