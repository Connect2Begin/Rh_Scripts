--[[ LuaUM ]]--

----------------------------------------
--[[ description:
  -- Characters kits.
  -- Наборы символов.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local locale = require 'context.utils.useLocale'

----------------------------------------
local Rh_Scripts = Rh_Scripts

local CharsMenu -- require in unit.MakeMenu
--local CharsMenu = require "Rh_Scripts.Common.CharsMenu"

--------------------------------------------------------------------------------
local unit = {}

---------------------------------------- Main data
unit.ScriptName = "Characters"
unit.ScriptPath = "Rh_Scripts.LuaUM.config"

unit.ScriptData = Rh_Scripts[unit.ScriptPath] or {}
Rh_Scripts[unit.ScriptPath] = unit.ScriptData

---------------------------------------- Custom
local DefCustom = {
  label = "Chars",
  name = "lum",
  path = unit.ScriptPath..".",

  locale = { kind = 'require', },
} --- DefCustom

---------------------------------------- Locale
local L, e1, e2 = locale.localize(DefCustom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Items
-- Группы наборов.
-- Пока содержит только локализованное название группы.
unit.KitGroups = {
  Chars = true,
  Maths = true,
  Punct = true,
  Techs = true,
  Draws = true,
} -- KitGroups

-- Данные о наборах.
unit.KitsData = {
  CharacterMap  = { Group = "All",   Hot = "_", text = 0, Title = 0, },
  Chars_Greeks  = { Group = "Chars", Hot = "G", text = 0, Title = 0, },
  Chars_Cyrils  = { Group = "Chars", Hot = "V", text = 0, Title = 0, },
  MathsSymbols  = { Group = "Maths", Hot = "M", text = 0, Title = 0, }, -- TODO
  MathsScripts  = { Group = "Maths", Hot = "X", text = 0, Title = 0, },
  MathsIndexes  = { Group = "Maths", Hot = "O", text = 0, Title = 0, },
  PunctSymbols  = { Group = "Punct", Hot = "`", text = 0, Title = 0, },
  Punct_Spaces  = { Group = "Punct", Hot = " ", text = 0, Title = 0, },
  Techs_Arrows  = { Group = "Techs", Hot = "A", text = 0, Title = 0, }, -- TODO
  Draws_Boxing  = { Group = "Draws", Hot = "B", text = 0, Title = 0, }, -- TODO
} -- KitsData

do
  local pairs = pairs
  local gL = unit.KitGroups
  
  local textFmt = "&%s - %s"  -- m/b utf-8 string
  local titleFmt = "%s: %s"   -- m/b utf-8 string

-- Localize value in gL.
for k in pairs(gL) do
  gL[k] = L["Chs"..k]
end --

  local KitsData = unit.KitsData

-- Localize text & Title in KitsData.
for k, v in pairs(KitsData) do
  local text = L["Chs"..k] or k
  v.text  = textFmt:format(v.Hot, text)
  local gl = gL[v.Group]
  v.Title = gl and titleFmt:format(gl, text) or text
end --

end -- do

----------------------------------------
do
  local DefConfig = {
    Name  = "",
    text  = "",
    Title = "",

    Props = {
      Bottom = L.EscToQuit,
    }, -- Props

    CfgData = {
      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = true,
      }, --
    }, -- CfgData

  } --- DefConfig

  local setmetatable = setmetatable

  local KitsData = unit.KitsData

-- Таблица для конфигурации меню.
function unit.MakeKindConfig (Name, Default) --> (table)
  local Config = {}
  local Default = Default == nil and true or Default
  if Default then Config.__index = DefConfig end

  Config.Name  = Name
  local NameData = KitsData[Name]
  Config.text  = NameData.text
  Config.Title = NameData.Title

  if Default then
    return setmetatable(Config, Config)
  end

  return Config
end ---- MakeKindConfig

-- Сформировать меню из набора символов.
function unit.MakeKindMenu (Cfg, Props, Datas, Keys) --> (Menu)
  local Keys = Keys or "AccelKey"
  local Cfg = type(Cfg) == 'table' and Cfg or unit.MakeKindConfig(Cfg)

  return CharsMenu.MakeMenu(Cfg, Props, Datas, Keys)
end ---- MakeKindMenu

end -- do

-- Использовать пробелы как обычные символы.
function unit.UseSpace (Menu) --| Menu.Items
  CharsMenu.SetLabelItemsText(Menu.Items, " ", "_")
  CharsMenu.SetKeyItemsField(Menu.Items, "Space$", false)
  --return Menu
end ----

-- Использовать компактное меню для умещения на экране.
function unit.CompactMenu (Menu) --| Menu.Props.RectMenu
  local RM_Props = Menu.Props.RectMenu
  --RM_Props.BoxKind = ""
  --RM_Props.Shadowed = false
  --RM_Props.MenuEdgeH = 0
  RM_Props.CompactText = true
  RM_Props.Separators = "V"
end ---- CompactMenu

---------------------------------------- Characters ----

----------------------------------------
local Chars = {}

do
  local U = unicode.utf8.char
  Chars.BS = U(0x0008)
  Chars.LF = U(0x000A)
  Chars.CR = U(0x000D)
end -- do

---------------------------------------- CharacterMap
function unit.CharacterMap ()
  local Name = "CharacterMap"
  local Menu = unit.ScriptData[Name]
  if Menu then
    --logShow(Menu, Name, "w d0")
    --[[
    if type(Menu) == 'function' then
      Menu = Menu()
      unit.ScriptData[Name] = Menu
    elseif type(Menu) == 'table' and
           type(Menu.Items) == 'function' then
      Menu.Items = Menu.Items()
    end
    --]]
    return Menu
  end

  local Order = "0123456789ABCDEF"

  local MaxCode = 0xFFFD
  local U = unicode.utf8.char

  local Datas = {
    " ",
  } ---
  for k = 1, MaxCode do
    Datas[#Datas + 1] = U(k)
  end

  local strings = require 'context.utils.useStrings'
  local uCP = strings.ucp2s

  local KeyOrder = { [0] = "────" }
  for k = 0, MaxCode, 0x10 do
    KeyOrder[#KeyOrder + 1] = uCP(k, true)
  end

  local Props = {
    Order = Order,
    KeyOrder = KeyOrder,
    Serial = true,
    --Heading = "Order",
    Heading = "Both",

    RectMenu = {
      MaxHeight = 2 + 1 + 0x10 + 2 + 0,

      --TextMark = true,
    },

    RectItem = {
      TextMark = true,
    },
  } ---

  local Cfg = unit.MakeKindConfig(Name, false)
  Cfg.LazyMake = true -- Отложенное формирование меню

  do
    local colors = require 'context.utils.useColors'
    local basics = colors.BaseColors
    local Basis = {
      StandardFG  = basics.navy,
      MarkedFG    = basics.black,
      BorderFG    = basics.black,
      TitleFG     = basics.black,
      --StatusBarFG = basics.black,
      ScrollBarFG = basics.black,
    } --- Basis

    local menUt = require "Rh_Scripts.Utils.Menu"
    Props.RectMenu.Colors = menUt.FormColors(Basis)
    --logShow(Cfg.Colors, "Colors", "w d2 xv8")
  end -- do

  --[[
  local function MakeMenu ()
    Menu = unit.MakeKindMenu(Cfg, Props, Datas, "None")
    unit.ScriptData[Name] = Menu

    return Menu
  end -- MakeMenu

  return MakeMenu
  --]]

  Menu = unit.MakeKindMenu(Cfg, Props, Datas, "None")
  unit.ScriptData[Name] = Menu

  return Menu
end ---- CharacterMap

---------------------------------------- Letters etc
function unit.Chars_Greeks ()
  local Name = "Chars_Greeks"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = [[abcdefghijklmnopqrstuvwxyz`[];',./\ ]]
  local Datas = -- Char + Shift
                [[αβχδεφγηιϕκλμνοπθρστυϖωξψζ΄[];',./, ]]..
                [[ΑΒΧΔΕΦΓΗΙϑΚΛΜΝΟΠΘΡΣΤΥϐΩΞΨΖ΅{}:"<>?|]]..Chars.BS..
                -- Ctrl + Shift
                [[   ϯϵϥϫϩϳϰϗϡϻϟϙϸ ϱςϲϒϭϣϝ ϛ [];',./°]]..Chars.CR..
                [[   Ϯ϶ϤϪϨ ϴϏϠϺϞϘϷ ϼϽϹ ϬϢϜ Ϛ {}:"<>? ]]..
                -- Alt + Shift
                [[ά   έ  ήίϊ    ό     ύϋώ   ΄[];',./\ ]]..
                [[Ά   Έ  ΉΊΪ    Ό     ΎΫΏ   ΅{}:"<>?| ]]
  local Props = {
    Order = Order,
    Serial = true,
    --Heading = "Order",
    Heading = "Both",
  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.UseSpace(Menu)
  unit.CompactMenu(Menu)
  --logShow(Menu, Name, 3)
  unit.ScriptData[Name] = Menu

  return Menu
end ---- Chars_Greeks

function unit.Chars_Cyrils ()
  local Name = "Chars_Cyrils"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = [[abcdefghijklmnopqrstuvwxyz`[];',./\90-= ]]
  local Datas = -- Char + Shift
                [[фисвуапршолдьтщзйкыегмцчняёхъжэбю.,90-= ]]..
                [[ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЁХЪЖЭБЮ,|()_+]]..Chars.BS..
                -- Ctrl + Shift                                      
                [[ѳіҁѹў ѱ ѵѡљѓјѿѻѯѝќїѣґ ѕџњꙗѥћђӂєѫѧӏ°[]-=]]..Chars.CR..
                [[ѲІҀѸЎ Ѱ ѴѠЉЃЈѾѺѮЍЌЇѢҐ ЅЏЊꙖѤЋЂӁЄѪѦӀ{}_+ ]]..
                -- Alt + Shift
                [[әӣҫ ӳӑԥһѷө ԑӯңѽҙҡқ ӗғӎꙅҷүҗ`ҳ ;',./\  -= ]]..
                [[ӘӢҪ ӲӐԤҺѶӨ ԐӮҢѼҘҠҚ ӖҒӍꙄҶҮҖ~Ҳ :"<>?|  _+ ]]..
                -- Ctrl+Alt + Shift
                [[ӫӥ  ӱӓ   ӧԓӡ ӈ ӟ ӄӹӕ  ӌӵұӝѐҕҥ ’ѭѩ…―  -= ]]..
                [[ӪӤ  ӰӒ   ӦԒӠ Ӈ Ӟ ӃӸӔ  ӋӴҰӜЀҔҤ$”ѬѨ&‾  _+ ]]
  local Props = {
    Order = Order,
    Serial = true,
    --Heading = "Order",
    Heading = "Both",
  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  --logShow(Menu, "Chars_Cyrils", 2)
  unit.UseSpace(Menu)
  unit.CompactMenu(Menu)
  unit.ScriptData[Name] = Menu
  
  return Menu
end ---- Chars_Cyrils

---------------------------------------- Mathematics
function unit.MathsScripts ()
  local Name = "MathsScripts"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = [[1234567890=-`[]ijk/\ ]]
  local Datas = -- Char + Shift
                [[₁₂₃₄₅₆₇₈₉₀₊₋₌₍₎ᵢⱼₖ,  ]]..
                [[¹²³⁴⁵⁶⁷⁸⁹⁰⁺⁻⁼⁽⁾ⁱʲᵏ, ]]..Chars.BS..
                -- Ctrl + Shift                
                [[1234567890+−=()ijk °]]..Chars.CR..
                [[⅟½⅓¼⅕⅙⅐⅛⅑⅒˖˗⁄     ‒ ]]..
                -- Alt + Shift
                [[ ⅔¾⅘⅚ ⅞        ᴵᴶᴷ/\ ]]..
                [[ ⅖⅗ ⅝             ?| ]]
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  local SVKeyFuncs = CharsMenu.SVKeyFuncs
  local Keys = {
    Kind = "AccelKey";
    CharsMenu.SVKeyValue,   SVKeyFuncs.S,
    SVKeyFuncs.C,           SVKeyFuncs.CS,
    SVKeyFuncs.A,           SVKeyFuncs.AS,
    SVKeyFuncs.CS,          SVKeyFuncs.CAS,
  } --- Keys

  Menu = unit.MakeKindMenu(Name, Props, Datas, Keys)
  unit.UseSpace(Menu)
  --logShow(Menu, Name, 3)
  unit.ScriptData[Name] = Menu

  return Menu
end ---- MathsScripts

function unit.MathsIndexes ()
  local Name = "MathsIndexes"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = "aijklmnprstuvxy"
  local Datas = -- Char + Shift
                "ₐᵢⱼₖₗₘₙₚᵣₛₜᵤᵥₓ "..
                "ᵃⁱʲᵏˡᵐⁿᵖʳˢᵗᵘᵛˣʸ"..
                -- Ctrl + Shift
                "               "..
                "ᴬᴵᴶᴷᴸᴹᴺᴾᴿ ᵀᵁⱽ  "--..
                -- Alt + Shift
                --"               "
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.ScriptData[Name] = Menu

  return Menu
end ---- MathsIndexes

---------------------------------------- Technology
function unit.Techs_Arrows ()
  local Name = "Techs_Arrows"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = "aijklmnprstuvxy"
  local Datas = -- Char + Shift
                "ₐᵢⱼₖₗₘₙₚᵣₛₜᵤᵥₓ "..
                "ᵃⁱʲᵏˡᵐⁿᵖʳˢᵗᵘᵛˣʸ"..
                -- Ctrl + Shift
                "               "..
                "ᴬᴵᴶᴷᴸᴹᴺᴾᴿ ᵀᵁⱽ  "--..
                -- Alt + Shift
                --"               "
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.ScriptData[Name] = Menu

  return Menu
end ---- TechsArrows

---------------------------------------- Punctuation
--[[
/   - dot/point
a   - acute
op  - prime + modifier apostroph
qw  - quote
b   - bullet
--]]
function unit.PunctSymbols ()
  local Name = "PunctSymbols"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = [[/opqwb`1234567890-\ ]]
  local Datas = -- Char + Shift
                [[…‵′‟”•´‼⁇§¨°ˆ¸˙«»-, ]]..
                [[․‶″‛’‣˝¡¿†¯‰ˇ˛˚‹›– ]]..Chars.BS..
                -- Ctrl + Shift
                [[‥‷‴„“◦˜⁉⁈‡_‱˘  ʿʾ— ]]..Chars.CR..
                [[⁝ ⁗‚‘⁃˟ ⸮¦‾ ⁏⁊ ˓˒‑  ]]..
                -- Alt + Shift
                [[ ʹʼˋˊ⁌ʻ‽⸘ˌˍ|˂˃ ⁀‿‒  ]]..
                [[ ʺˮˎˏ⁍ʽ⁅⁆ˈˉ―˄˅⁓⁐⁔   ]]
--[=[
  local Order = [[/aopqwb`1234567890-\ ]]
  local Datas = -- Char + Shift
                [[…́‵′‟”•´‼⁇§¨°ˆ¸˙«»-, ]]..
                [[․̀‶″‛’‣˝¡¿†¯‰ˇ˛˚‹›– ]]..Chars.BS..
                -- Ctrl + Shift
                [[‥̋‷‴„“◦˜⁉⁈‡_‱˘  ʿʾ— ]]..Chars.CR..
                [[⁝̏ ⁗‚‘⁃˟ ⸮¦‾ ⁏⁊ ˓˒‑  ]]..
                -- Alt + Shift
                [[ ̍ʹʼˋˊ⁌ʻ‽⸘ˌˍ|˂˃ ⁀‿‒  ]]..
                [[ ̎ʺˮˎˏ⁍ʽ⁅⁆ˈˉ―˄˅⁓⁐⁔   ]]
  \x0300—\x036F - Combining Diacritical Marks.
  Greeks:
  ʹ - Greek Numeral Sign (Dexia keraia)
  ͵ - Greek Lower Numeral Sign (Aristeri keraia)
  ͺ - Greek Ypogegrammeni
  ΄ - Greek Tonos
  ΅ - Greek Dialytika Tonos
  \x0483-\x0487 Combining Cyrillic
  etc
--]=]
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  Menu = unit.MakeKindMenu(Name, Props, Datas, "AccelKey")
  unit.UseSpace(Menu)
  unit.ScriptData[Name] = Menu

  return Menu
end ---- PunctSymbols

function unit.Punct_Spaces ()
  local Name = "Punct_Spaces"
  local Menu = unit.ScriptData[Name]
  if Menu then return Menu end

  local Order = {
    { '   " "', ' ', 'Multiply', }, { ' "-"/Num-', '-', 'Subtract', },
    { '   "`"', '`', 'Divide',   }, { ' "="/Num+', '=', 'Add',      },
    --{ '   " "', ' ', 'MULTIPLY', }, { ' "-"/Num-', '-', 'SUBTRACT', },
    --{ '   "`"', '`', 'DIVIDE',   }, { ' "="/Num+', '=', 'ADD',      },
  } ---

  local Datas = {
    { ' ', 'Thin sp.',    }, { '­', 'Soft hyph.', },
    { ' ', 'Fig. space ', }, { '‒', 'Fig. dash',  },

    { ' ', 'En space',    }, { '–', ' En dash  ', },
    { ' ', 'Punct. sp. ', }, { '−', '  Minus  ',  },

    { ' ', 'Em space',    }, { '—', ' Em dash  ', },
    { ' ', 'Hair space ', }, { '‐', ' Hyphen  ',  },

    { ' ', 'N-b. sp.',    }, { '‑', 'N-b. hyph.', },
    { ' ', 'Narrow nbsp', }, { '‧', 'Hyph. pt.',  },

    --[[
    { '',  '        ',    }, { '_', '          ', },
    { '',  '           ', }, { '',  '         ',  },
    --]]
  } ---

  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
    --___ = true, -- DEBUG
  } ---

  local Cfg = unit.MakeKindConfig(Name, false)
  --local Menu = unit.MakeKindMenu(Cfg, Props, Datas, "DupleKey")
  Menu = unit.MakeKindMenu(Cfg, Props, Datas, CharsMenu.DefDoubleKeys)
  --logShow(Menu, Name, "w d3")
  unit.ScriptData[Name] = Menu

  return Menu
end ---- Punct_Spaces

--------------------------------------------------------------------------------

---------------------------------------- Menu making

---------------------------------------- ---- Menu
function unit.MakeMenu ()
  local gL = unit.KitGroups

  CharsMenu = require "Rh_Scripts.Common.CharsMenu"

  return {
    text  = L.ChsKitItem,
    Title = L.CharacterKits,

    --Inherit = false,

    --Items = { unit.Chars_Custom, unit.Chars_Alters, unit.Chars_Greeks, },
    Items = {
      unit.CharacterMap,

      { text = gL.Chars, separator = true, },
      unit.Chars_Greeks, unit.Chars_Cyrils,

      { text = gL.Maths, separator = true, },
      unit.MathsScripts, unit.MathsIndexes,

      --{ text = gL.Techs, separator = true, },
      --unit.Techs_Arrows,

      { text = gL.Punct, separator = true, },
      unit.PunctSymbols, unit.Punct_Spaces,

    }, -- Items

  } ----
end ---- MakeMenu

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.CharacterKits,

    Items = { unit.MakeMenu },
  },

  ["Characters"] = unit.MakeMenu,
} ---

return Data
--------------------------------------------------------------------------------
