--[[ LuaUM ]]--

----------------------------------------
--[[ description:
  -- Characters kits.
  -- Наборы символов.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context

local locale = require 'context.utils.useLocale'

----------------------------------------
local CharsMenu -- require in unit.MakeMenu
--local CharsMenu = require "Rh_Scripts.Common.CharsMenu"

----------------------------------------
--[[
local dbg = require "context.utils.useDebugs"
local logShow = dbg.Show
--]]

--------------------------------------------------------------------------------
local unit = {}

---------------------------------------- Custom
local Custom = {
  label = "Chars",
  name = "lum",
  path = "Rh_Scripts.LuaUM.config.",
  locale = { kind = 'require', },
} ---

---------------------------------------- Locale
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Items
-- Группы наборов.
-- Пока содержит только локализованное название группы.
unit.KitGroups = {
  Chars = true,
  Maths = true,
  Punct = true,
  Techs = true,
  Draws = true,
} -- KitGroups

-- Данные о наборах.
unit.KitsData = {
  CharsGreekEx = { Group = "Chars", Hot = "G", text = 0, Title = 0, },
  CharsCyrSlav = { Group = "Chars", Hot = "V", text = 0, Title = 0, },
  MathsSymbols = { Group = "Maths", Hot = "M", text = 0, Title = 0, }, -- TODO
  MathsScripts = { Group = "Maths", Hot = "X", text = 0, Title = 0, },
  MathsIndexes = { Group = "Maths", Hot = "O", text = 0, Title = 0, },
  PunctSymbols = { Group = "Punct", Hot = "`", text = 0, Title = 0, },
  PunctSpaHyps = { Group = "Punct", Hot = " ", text = 0, Title = 0, },
  Techs_Arrows = { Group = "Techs", Hot = "A", text = 0, Title = 0, }, -- TODO
  Draws_Boxing = { Group = "Draws", Hot = "B", text = 0, Title = 0, }, -- TODO
} -- KitsData

do
  local pairs = pairs
  local gL = unit.KitGroups
  
  local textFmt = "&%s - %s"  -- m/b utf-8 string
  local titleFmt = "%s: %s"   -- m/b utf-8 string

-- Localize value in gL.
for k in pairs(gL) do
  gL[k] = L["Chs"..k]
end --

  local KitsData = unit.KitsData

-- Localize text & Title in KitsData.
for k, v in pairs(KitsData) do
  local text = L["Chs"..k] or k
  v.text  = textFmt:format(v.Hot, text)
  v.Title = titleFmt:format(gL[v.Group], text)
end --

end -- do

----------------------------------------
do
  local DefConfig = {
    Name  = "",
    text  = "",
    Title = "",

    Props = {
      Bottom = L.EscToQuit,
    }, -- Props

    CfgData = {
      UMenu = {
        BottomHotKeys = false,
        ReturnToUMenu = true,
      }, --
    }, -- CfgData

  } --- DefConfig

  local setmetatable = setmetatable

  local KitsData = unit.KitsData

-- Таблица для конфигурации меню.
function unit.MakeKindConfig (Name, Default) --> (table)
  local Config = {}
  local Default = Default == nil and true or Default
  if Default then Config.__index = DefConfig end

  Config.Name  = Name
  local NameData = KitsData[Name]
  Config.text  = NameData.text
  Config.Title = NameData.Title

  if Default then
    return setmetatable(Config, Config)
  end

  return Config
end ---- MakeKindConfig

-- Сформировать меню из набора символов.
function unit.MakeKindMenu (Cfg, Props, Datas, Keys) --> (Menu)
  local Keys = Keys or "AccelKey"
  local Cfg = type(Cfg) == 'table' and Cfg or unit.MakeKindConfig(Cfg)

  return CharsMenu.Menu(Cfg, Props, Datas, Keys)
end ---- MakeKindMenu

end -- do

-- Использовать пробелы как обычные символы.
function unit.UseSpace (Menu) --| Menu.Items
  CharsMenu.List.SetLabelItemsText(Menu.Items, " ", "_")
  CharsMenu.List.SetKeyItemsField(Menu.Items, "Space$", false)
  --return Menu
end ----

-- Использовать компактное меню для умещения на экране.
function unit.CompactMenu (Menu) --| Menu.Props.RectMenu
  local RectMenu = Menu.Props.RectMenu
  --RectMenu.BoxKind = ""
  --RectMenu.Shadowed = false
  --RectMenu.MenuEdgeH = 0
  RectMenu.CompactText = true
  RectMenu.Separators = "V"
end ---- CompactMenu

---------------------------------------- Characters ----

----------------------------------------
local Chars = {}

do
  local U = unicode.utf8.char
  Chars.BS = U(0x0008)
  Chars.LF = U(0x000A)
  Chars.CR = U(0x000D)
end -- do
---------------------------------------- Letters etc

---------------------------------------- ---- Greek and extended
function unit.CharsGreekEx ()

  local Order = [[abcdefghijklmnopqrstuvwxyz`[];',./\ ]]
  local Datas = -- Char + Shift
                [[αβχδεφγηιϕκλμνοπθρστυϖωξψζ΄[];',./, ]]..
                [[ΑΒΧΔΕΦΓΗΙϑΚΛΜΝΟΠΘΡΣΤΥϐΩΞΨΖ΅{}:"<>?|]]..Chars.BS..
                -- Ctrl + Shift
                [[   ϯϵϥϫϩϳϰϗϡϻϟϙϸ ϱςϲϒϭϣϝ ϛ [];',./°]]..Chars.CR..
                [[   Ϯ϶ϤϪϨ ϴϏϠϺϞϘϷ ϼϽϹ ϬϢϜ Ϛ {}:"<>? ]]..
                -- Alt + Shift
                [[ά   έ  ήίϊ    ό     ύϋώ   ΄[];',./\ ]]..
                [[Ά   Έ  ΉΊΪ    Ό     ΎΫΏ   ΅{}:"<>?| ]]
  local Props = {
    Order = Order,
    Serial = true,
    --Heading = "Order",
    Heading = "Both",
  } ---

  local Menu = unit.MakeKindMenu('CharsGreekEx', Props, Datas, "AccelKey")
  unit.UseSpace(Menu)
  unit.CompactMenu(Menu)
  --logShow(Menu, "CharsGreekEx", 3)

  return Menu
end ---- CharsGreekEx
---------------------------------------- ---- Cyrillic slavic
function unit.CharsCyrSlav ()

  local Order = [[abcdefghijklmnopqrstuvwxyz`[];',./\90-= ]]
  local Datas = -- Char + Shift
                [[фисвуапршолдьтщзйкыегмцчняёхъжэбю.,90-= ]]..
                [[ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЁХЪЖЭБЮ,|()_+]]..Chars.BS..
                -- Ctrl + Shift                                      
                [[ѳіҁѹў ѱ ѵѡљѓјѿѻѯѝќїѣґ ѕџњꙗѥћђӂєѫѧӏ°[]-=]]..Chars.CR..
                [[ѲІҀѸЎ Ѱ ѴѠЉЃЈѾѺѮЍЌЇѢҐ ЅЏЊꙖѤЋЂӁЄѪѦӀ{}_+ ]]..
                -- Alt + Shift
                [[әӣҫ ӳӑԥһѷө ԑӯңѽҙҡқ ӗғӎꙅҷүҗ`ҳ ;',./\  -= ]]..
                [[ӘӢҪ ӲӐԤҺѶӨ ԐӮҢѼҘҠҚ ӖҒӍꙄҶҮҖ~Ҳ :"<>?|  _+ ]]..
                -- Ctrl+Alt + Shift
                [[ӫӥ  ӱӓ   ӧԓӡ ӈ ӟ ӄӹӕ  ӌӵұӝѐҕҥ ’ѭѩ…―  -= ]]..
                [[ӪӤ  ӰӒ   ӦԒӠ Ӈ Ӟ ӃӸӔ  ӋӴҰӜЀҔҤ$”ѬѨ&‾  _+ ]]
  local Props = {
    Order = Order,
    Serial = true,
    --Heading = "Order",
    Heading = "Both",
  } ---

  local Menu = unit.MakeKindMenu('CharsCyrSlav', Props, Datas, "AccelKey")
  --logShow(Menu, "CharsCyrSlav", 2)
  unit.UseSpace(Menu)
  unit.CompactMenu(Menu)

  return Menu
end ---- CharsCyrSlav
---------------------------------------- Mathematics

---------------------------------------- ---- Sub-/superscripts
function unit.MathsScripts ()

  local Order = [[1234567890=-`[]ijk/\ ]]
  local Datas = -- Char + Shift
                [[₁₂₃₄₅₆₇₈₉₀₊₋₌₍₎ᵢⱼₖ,  ]]..
                [[¹²³⁴⁵⁶⁷⁸⁹⁰⁺⁻⁼⁽⁾ⁱʲᵏ, ]]..Chars.BS..
                -- Ctrl + Shift                
                [[1234567890+−=()ijk °]]..Chars.CR..
                [[⅟½⅓¼⅕⅙⅐⅛⅑⅒˖˗⁄     ‒ ]]..
                -- Alt + Shift
                [[ ⅔¾⅘⅚ ⅞        ᴵᴶᴷ/\ ]]..
                [[ ⅖⅗ ⅝             ?| ]]
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  local ChKeys = CharsMenu.Keys
  local Keys = {
    Kind = "AccelKey";
    ChKeys.SVKeyValue,    ChKeys.SVKeyFuncs.S,
    ChKeys.SVKeyFuncs.C,  ChKeys.SVKeyFuncs.CS,
    ChKeys.SVKeyFuncs.A,  ChKeys.SVKeyFuncs.AS,
    ChKeys.SVKeyFuncs.CS, ChKeys.SVKeyFuncs.CAS,
  } --- Keys

  local Menu = unit.MakeKindMenu('MathsScripts', Props, Datas, Keys)
  unit.UseSpace(Menu)
  --logShow(Menu, "MathsScripts", 3)

  return Menu
end ---- MathsScripts
---------------------------------------- ---- Other indexes
function unit.MathsIndexes ()

  local Order = "aijklmnprstuvxy"
  local Datas = -- Char + Shift
                "ₐᵢⱼₖₗₘₙₚᵣₛₜᵤᵥₓ "..
                "ᵃⁱʲᵏˡᵐⁿᵖʳˢᵗᵘᵛˣʸ"..
                -- Ctrl + Shift
                "               "..
                "ᴬᴵᴶᴷᴸᴹᴺᴾᴿ ᵀᵁⱽ  "--..
                -- Alt + Shift
                --"               "
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  local Menu = unit.MakeKindMenu('MathsIndexes', Props, Datas, "AccelKey")

  return Menu
end ---- MathsIndexes
---------------------------------------- Technology

---------------------------------------- ---- Arrows
function unit.TechsArrows ()

  local Menu = unit.MakeKindMenu('TechsArrows', Props, Datas, "AccelKey")

  return Menu
end ---- TechsArrows
---------------------------------------- Punctuation

---------------------------------------- ---- Symbols
--[[
/   - dot/point
a   - acute
op  - prime + modifier apostroph
qw  - quote
b   - bullet
--]]
function unit.PunctSymbols ()

  local Order = [[/opqwb`1234567890-\ ]]
  local Datas = -- Char + Shift
                [[…‵′‟”•´‼⁇§¨°ˆ¸˙«»-, ]]..
                [[․‶″‛’‣˝¡¿†¯‰ˇ˛˚‹›– ]]..Chars.BS..
                -- Ctrl + Shift
                [[‥‷‴„“◦˜⁉⁈‡_‱˘  ʿʾ— ]]..Chars.CR..
                [[⁝ ⁗‚‘⁃˟ ⸮¦‾ ⁏⁊ ˓˒‑  ]]..
                -- Alt + Shift
                [[ ʹʼˋˊ⁌ʻ‽⸘ˌˍ|˂˃ ⁀‿‒  ]]..
                [[ ʺˮˎˏ⁍ʽ⁅⁆ˈˉ―˄˅⁓⁐⁔   ]]
--[=[
  local Order = [[/aopqwb`1234567890-\ ]]
  local Datas = -- Char + Shift
                [[…́‵′‟”•´‼⁇§¨°ˆ¸˙«»-, ]]..
                [[․̀‶″‛’‣˝¡¿†¯‰ˇ˛˚‹›– ]]..Chars.BS..
                -- Ctrl + Shift
                [[‥̋‷‴„“◦˜⁉⁈‡_‱˘  ʿʾ— ]]..Chars.CR..
                [[⁝̏ ⁗‚‘⁃˟ ⸮¦‾ ⁏⁊ ˓˒‑  ]]..
                -- Alt + Shift
                [[ ̍ʹʼˋˊ⁌ʻ‽⸘ˌˍ|˂˃ ⁀‿‒  ]]..
                [[ ̎ʺˮˎˏ⁍ʽ⁅⁆ˈˉ―˄˅⁓⁐⁔   ]]
  \x0300—\x036F - Combining Diacritical Marks.
  Greeks:
  ʹ - Greek Numeral Sign (Dexia keraia)
  ͵ - Greek Lower Numeral Sign (Aristeri keraia)
  ͺ - Greek Ypogegrammeni
  ΄ - Greek Tonos
  ΅ - Greek Dialytika Tonos
  \x0483-\x0487 Combining Cyrillic
  etc
--]=]
  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
  } ---

  local Menu = unit.MakeKindMenu('PunctSymbols', Props, Datas, "AccelKey")
  unit.UseSpace(Menu)

  return Menu
end ---- PunctSymbols
---------------------------------------- ---- Space & Hyphen
function unit.PunctSpaHyps ()

  local Order = {
    { '   " "', ' ', 'MULTIPLY', }, { ' "-"/Num-', '-', 'SUBTRACT', },
    { '   "`"', '`', 'DIVIDE',   }, { ' "="/Num+', '=', 'ADD',      },
  } ---

  local Datas = {
    { ' ', 'Thin sp.',    }, { '­', 'Soft hyph.', },
    { ' ', 'Fig. space ', }, { '‒', 'Fig. dash',  },

    { ' ', 'En space',    }, { '–', ' En dash  ', },
    { ' ', 'Punct. sp. ', }, { '−', '  Minus  ',  },

    { ' ', 'Em space',    }, { '—', ' Em dash  ', },
    { ' ', 'Hair space ', }, { '‐', ' Hyphen  ',  },

    { ' ', 'N-b. sp.',    }, { '‑', 'N-b. hyph.', },
    { ' ', 'Narrow nbsp', }, { '‧', 'Hyph. pt.',  },

    --[[
    { '',  '        ',    }, { '_', '          ', },
    { '',  '           ', }, { '',  '         ',  },
    --]]
  } ---

  local Props = {
    Order = Order,
    Serial = true,
    Heading = "Both",
    --___ = true, -- DEBUG
  } ---

  local Cfg = unit.MakeKindConfig('PunctSpaHyps', false)
  local Menu = unit.MakeKindMenu(Cfg, Props, Datas, "DupleKey")
  --logShow(Menu, "PunctSpaHyps", 3)

  return Menu
end ---- PunctSpaHyps

--------------------------------------------------------------------------------

---------------------------------------- Menu making

---------------------------------------- ---- Menu
function unit.MakeMenu ()
  local gL = unit.KitGroups

  CharsMenu = require "Rh_Scripts.Common.CharsMenu"

  return {
    text  = L.ChsKitItem,
    Title = L.CharacterKits,

    --Inherit = false,

    --Items = { unit.Chars_Custom, unit.Chars_Alters, unit.CharsGreekEx, },
    Items = {
      --{ text = gL.Chars, separator = true, },
      unit.CharsGreekEx, unit.CharsCyrSlav,

      { text = gL.Maths, separator = true, },
      unit.MathsScripts, unit.MathsIndexes,

      --{ text = gL.Techs, separator = true, },
      --unit.Techs_Arrows,

      { text = gL.Punct, separator = true, },
      unit.PunctSymbols, unit.PunctSpaHyps,

    }, -- Items

  } ----
end ---- MakeMenu

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.CharacterKits,

    Items = { unit.MakeMenu },
  },

  ["Characters"] = unit.MakeMenu,
} ---

return Data
--------------------------------------------------------------------------------
