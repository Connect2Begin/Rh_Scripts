--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Scripts to edit subtitles.
  -- Скрипты для правки субтитров.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context

local tables = require 'context.utils.useTables'
local locale = require 'context.utils.useLocale'

----------------------------------------
local dbg = require "context.utils.useDebugs"
local logShow, datShow = dbg.Show, dbg.ShowData

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "Subtitles",
  name = "subs",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },
} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

local format = string.format

for k, v in tables.allpairs(L) do
  local name = type(k) == 'string' and k:match("^cap%_(.*)$")
  if name then
    local h = L["hot_"..name]
    L["itm_"..name] = h and type(v) == 'string' and format("&%s - %s", h, v) or v
  end
end

---------------------------------------- Separator
-- [[
local mSeparator = {
  separator = true,
} ---
--]]

----------------------------------------
local TimeCalcer = require "Rh_Scripts.Others.TimeCalcer"

local useTime = require "Rh_Scripts.Others.useTime"
local newTime = useTime.newTime

---------------------------------------- Items
local unit = {}

local types = ctxdata.config.types

function unit.SubtitleType () --| (window)
  local SubType = TimeCalcer.getFileType()
  local SubDesc = ""
  if SubType then SubDesc = types[SubType].desc or "" end
  if SubDesc ~= "" then SubDesc = "\n"..SubDesc end

  return far.Message((SubType or L.SubtitleUnknownType)..SubDesc,
                     L.cap_SubtitleType)
end ----

function unit.CurrentLineData () --| (window)
  local tp = TimeCalcer.getFileType()
  if not tp then return end

  local data = TimeCalcer.getLineData(tp)

  return logShow(data, L.cap_CurrentLineData)
end ----

function unit.CurLineTimeLen () --| (window)
  local tp = TimeCalcer.getFileType()
  if not tp then return end

  local diff = TimeCalcer.getLineTimeLen(tp)
  local time = newTime():from_z(diff)

  local t = {
    L.TimeLenAssaFmt:format(time.h, time.n, time.s, time:cz()),
    L.TimeLenDataFmt:format(time:data()),
    L.TimeLenMsecFmt:format(diff),
    L.TimeLenTextFmt:format(time:data()),
  } ---
  local kind = {
    ShowLineNumber = false,
  }

  return datShow(t, L.cap_CurLineTimeLen, kind)
end ----

----------------------------------------
local mTimeCalcer = {
  text = L.TimeCalcer,
  Items = {
    { text = L.itm_CurLineTimeLen,
      Function = unit.CurLineTimeLen },
    mSeparator,
    { text = L.itm_CurrentLineData,
      Function = unit.CurrentLineData },
  } ---
} --- mTimeCalcer

---------------------------------------- ----
local Scripts = {
  text = L.Subtitles,
  Items = {
    mTimeCalcer, -- Калькулятор
    mSeparator,
    { text = L.itm_SubtitleType,
      Function = unit.SubtitleType },
  } -- Items
} --- Scripts

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.Subtitles,
    Items = { Scripts },
  },
  --["Subtitles Scripts"] = Scripts,
} ---

return Data
--------------------------------------------------------------------------------
