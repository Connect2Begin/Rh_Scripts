--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Template Insert: lua.
  -- Вставка шаблона: lua.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context

local locale = require 'context.utils.useLocale'

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "TplIns",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },

} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)

end

---------------------------------------- Lines
--local substr = string.sub
local format = string.format

local line_lim = 80
local line_len = line_lim - 2
local link_len = line_lim - 4
--local note_len = line_lim - 8
local spec_len = line_lim - 10
local line_fmt = "--%s"
local link_fmt = "--%s--"
--local note_fmt = "--[[%s]]--"
local spec_fmt = "--[=[%s]=]--"
local l_hymin = ('-'):rep(line_lim)
local l_equal = ('='):rep(line_lim)
local l_stars = ('*'):rep(line_lim)

---------------------------------------- ----
local mInsert = {

  text  = L.TplInsItem,
  Title = L.TemplateInsert,
  MenuView = "RectMenu",

  Props = {
    RectMenu = {
      Cols = 5,
      Fixed = { HeadRows = 1, HeadCols = 1 ,},

      IsStatusBar = true,
    }, -- RectMenu

  }, -- Props

  CfgData = {
    UMenu = {
      TextNamedKeys = false,
      UseMenuTexter = false,
    },

  }, -- CfgData

  Items = {
    -- Header --
    { text = " ", Label = true },
    { text = "   <a>   ", Label = true },
    { text = "Shift+<a>", Label = true },
    { text = " Ctrl+<a>", Label = true },
    { text = " Alt+<a> ", Label = true },
    -- - -- line comment
    { text = "-", Label = true },
    { text = "---------",
      Plain = format(link_fmt, l_hymin:sub(1, link_len)),
      AccelStr = "-" },
    { text = "--=====--",
      Plain = format(link_fmt, l_equal:sub(1, link_len)),
      AccelStr = "S+-" },
    { text = "-- row --",
      Macro = "--  --@Left@3",
      AccelStr = "C+-" },
    { text = "--*****--",
      Plain = format(link_fmt, l_stars:sub(1, link_len)),
      AccelStr = "A+-" },
    -- = -- block comment
    { text = "=", Label = true },
    { text = "---------",
      Plain = format(line_fmt, l_hymin:sub(1, line_len)),
      AccelStr = "=" },
    { text = "//=======",
      Plain = format(line_fmt, l_equal:sub(1, line_len)),
      AccelStr = "S+=" },
    { text = "--[[b]]--",
      Macro = "--[[  ]]--@Left@5",
      AccelStr = "C+=" },
    { text = "--[[*]]--",
      Plain = format(spec_fmt, l_stars:sub(1, spec_len)),
      AccelStr = "A+=" },
    -- A -- raw
    { text = "A", Label = true },
    { text = "rawget",
      Macro = "rawget(, )@Left@3",
      AccelStr = "A" },
    { text = "rawset",
      Macro = "rawset(, , )@Left@5",
      AccelStr = "S+A" },
    { text = "assert",
      Macro = "assert()@Left",
      AccelStr = "C+A" },
    { text = "rawequal",
      Macro = "rawequal(, )@Left@3",
      AccelStr = "A+A" },
    -- B -- block / repeat-until / break
    { text = "B", Label = true },
    { text = "block",
      Macro = "do @Here end@Back",
      AccelStr = "B" },
    { text = "full block",
      Macro = "do@IndEnter  --@IndEnter@Left@2end -- ",
      AccelStr = "S+B" },
    { text = "rep-until",
      Macro = "repeat@Here@IndEnteruntil @Back@IndEnter  @",
      AccelStr = "C+B" },
    { text = "break",
      Plain = "break",
      AccelStr = "A+B" },
    -- [[
    -- C -- ??? / continue
    { text = "C", Label = true },
    { text = "case",
      --Plain = "elseif",
      Macro = "if @Here then@IndEnterelseif then@IndEnterend@Back",
      Hint = "if ... then ... elseif ... then ... end",
      AccelStr = "C" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "S+C" },
    { text = "",
      --Plain = " ",
      separator = true,
      AccelStr = "C+C" },
    { text = "continue",
      --Plain = "break",
      Macro = "repeat@IndEnter  @Herebreak@IndEnter@Left@2until true@Back",
      Hint = "repeat ... break ... until true",
      AccelStr = "A+C" },
    --]]
    -- D -- for-do
    { text = "D", Label = true },
    { text = "for-do",
      Macro = "for @Here = ,  do  end@Back",
      AccelStr = "D" },
    { text = "full for",
      Macro = "for @Here = ,  do@IndEnterend -- for@Back",
      AccelStr = "S+D" },
    { text = "down for",
      Macro = "for @Here = , , -1 do@IndEnterend -- for@Back",
      AccelStr = "C+D" },
    { text = "plain find",
      Macro = ":find(@Here, 1, true)@Back",
      AccelStr = "A+D" },
    --[[
    -- E -- ???
    { text = "E", Label = true },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "E" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "S+E" },
    { text = "",
      --Macro = "",
      AccelStr = "C+E" },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "A+E" },
    --]]
    -- F -- function
    { text = "F", Label = true },
    { text = "function",
      Plain = "function ",
      AccelStr = "F" },
    { text = "full func",
      Macro = "function @Here ()@IndEnter  --@IndEnter@Left@2end ----@Back",
      AccelStr = "S+F" },
    { text = "local func",
      Macro = "local function @Here ()@IndEnter  --@IndEnter@Left@2end --@Back",
      AccelStr = "C+F" },
    { text = "str find",
      Macro = ":find()@Left",
      AccelStr = "A+F" },
    -- G -- gen-loop
    { text = "G", Label = true },
    { text = "gen-do",
      Macro = "for @Here in  do  end@Back",
      AccelStr = "G" },
    { text = "full gen",
      Macro = "for @Here in  do@IndEnterend -- for@Back",
      AccelStr = "S+G" },
    { text = "gen-gmatch",
      Macro = "for s in @Here:gmatch() do@IndEnterend@Back",
      AccelStr = "C+G" },
    { text = "str gsub",
      Macro = ":gsub()@Left",
      AccelStr = "A+G" },
    -- I -- if-then/else
    { text = "I", Label = true },
    { text = "if-then",
      Macro = "if @Here then@IndEnterend@Back",
      AccelStr = "I" },
    { text = "if-else",
      Macro = "if @Here then@IndEnterelse@IndEnterend@Back",
      AccelStr = "S+I" },
    { text = "full if",
      Macro = "if @Here then@IndEnterelse@IndEnterend -- if@Back",
      AccelStr = "C+I" },
    { text = "__index",
      Plain = "__index",
      AccelStr = "A+I" },
    -- J -- if-then-do
    { text = "J", Label = true },
    { text = "else-if",
      Macro = "elseif @Here then",
      AccelStr = "J" },
    { text = "Name",
      Plain = "Name",
      AccelStr = "S+J" },
    { text = "Index",
      Plain = "Index",
      AccelStr = "C+J" },
    { text = "__newindex",
      Plain = "__newindex",
      AccelStr = "A+J" },
    -- K -- for-in-do
    { text = "K", Label = true },
    { text = "kv-pairs",
      Macro = "for k, v in pairs(@Here) do@IndEnterend@Back",
      AccelStr = "K" },
    { text = "kv-ipairs",
      Macro = "for k, v in ipairs(@Here) do@IndEnterend@Back",
      AccelStr = "S+K" },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "C+K" },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "A+K" },
    -- L -- nil / boolean
    { text = "L", Label = true },
    { text = "nil",
      Plain = "nil",
      AccelStr = "L" },
    { text = "local",
      Plain = "local ",
      AccelStr = "S+L" },
    { text = "boolean",
      Plain = "boolean",
      AccelStr = "C+L" },
    { text = "pcall",
      Macro = "pcall()@Left",
      AccelStr = "A+L" },
    -- M -- meta
    { text = "M", Label = true },
    { text = "set meta",
      Macro = "setmetatable(@Here, )@Back",
      AccelStr = "M" },
    { text = "get meta",
      Macro = "getmetatable()@Left",
      AccelStr = "S+M" },
    { text = "set index",
      Macro = "setmetatable(@Here, { __index =  })@Back",
      AccelStr = "C+M" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+M" },
    -- N -- int / number / ext
    { text = "N", Label = true },
    { text = "integer",
      Plain = "integer",
      AccelStr = "N" },
    { text = "number",
      Plain = "number",
      AccelStr = "S+N" },
    { text = "float",
      Plain = "float",
      AccelStr = "C+N" },
    { text = "error",
      Plain = "error",
      AccelStr = "A+N" },
    --[[
    -- O -- ???
    { text = "O", Label = true },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "O" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "S+O" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "C+O" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+O" },
    --]]
    --[[
    -- P -- ???
    { text = "P", Label = true },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "P" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "S+P" },
    { text = "",
      --Plain = "",
      separator = true,
      AccelStr = "C+P" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+P" },
    --]]
    --[[
    -- Q -- class
    { text = "Q", Label = true },
    { text = "class",
      --Macro = "",
      separator = true,
      AccelStr = "Q" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "S+Q" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "C+Q" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+Q" },
    --]]
    -- R -- return
    { text = "R", Label = true },
    { text = "Result",
      Plain = "Result",
      AccelStr = "R" },
    { text = "",
      --Macro = '',
      separator = true,
      AccelStr = "S+R" },
    { text = "return",
      Plain = "return ",
      AccelStr = "C+R" },
    { text = "SError",
      Plain = "SError",
      AccelStr = "A+R" },
    -- S -- string
    { text = "S", Label = true },
    { text = "string",
      Plain = "string",
      AccelStr = "S" },
    { text = "string[k]",
      Macro = ":sub(k, k)@Left@5",
      AccelStr = "S+S" },
    { text = "s. sub",
      Macro = ":sub()@Left",
      AccelStr = "C+S" },
    { text = "select",
      Macro = "select()@Left",
      AccelStr = "A+S" },
    -- T -- table
    { text = "T", Label = true },
    { text = "table",
      Plain = "table",
      AccelStr = "T" },
    { text = "t. create",
      Macro = "tables.create()@Left",
      AccelStr = "S+T" },
    { text = "t. concat",
      Macro = "table.concat()@Left",
      AccelStr = "C+T" },
    { text = "unpack",
      Macro = "unpack()@Left",
      AccelStr = "A+T" },
    -- U -- unit / require
    { text = "U", Label = true },
    { text = "unit",
      Plain = "local unit = {}",
      AccelStr = "U" },
    { text = "require",
      Macro = 'require ""@Left',
      AccelStr = "S+U" },
    { text = "local req",
      Macro = 'local @Here = require ""@Back',
      AccelStr = "C+U" },
    { text = "-- unit --",
      Macro = "-@80@Enterlocal unit = {}@Enter@2-@40",
      --separator = true,
      AccelStr = "A+U" },
    -- V -- type
    { text = "V", Label = true },
    { text = "Value",
      Plain = "Value",
      AccelStr = "V" },
    { text = "Table",
      Plain = "Table",
      AccelStr = "S+V" },
    { text = "type",
      Macro = "type()@Left",
      AccelStr = "C+V" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+V" },
    -- W -- while-do
    { text = "W", Label = true },
    { text = "while-do",
      Macro = "while @Here do end@Back",
      AccelStr = "W" },
    { text = "full while",
      Macro = "while @Here do@IndEnterend -- while@Back",
      AccelStr = "S+W" },
    { text = "", -- with-do
      --Macro = "with @Here do end@Back",
      separator = true,
      AccelStr = "CS+W" },
    { text = "", -- full with
      --Macro = "with @Here do@IndEnterend -- with@Back",
      separator = true,
      AccelStr = "A+W" },
    -- X -- table kinds
    { text = "X", Label = true },
    { text = "enum",
      Macro = "{ @Here, }@Back",
      AccelStr = "X" },
    { text = "record",
      Macro = "{@IndEnter  ,@Here@IndEnter@Left@2} ---@Back",
      AccelStr = "S+X" },
    { text = "l. table",
      Macro = "local @Here = {@IndEnter} ---@Back",
      AccelStr = "C+X" },
    { text = "array",
      Macro = "{ @Here, }@Back",
      AccelStr = "A+X" },
    -- 3 -- convert/check functions
    { text = "3", Label = true },
    { text = "tostring",
      Macro = "tostring()@Left",
      AccelStr = "3" },
    { text = "tonumber",
      Macro = "tonumber()@Left",
      AccelStr = "S+3" },
    { text = "is string",
      Macro = 'type(@Here) == "string"@Back',
      AccelStr = "C+3" },
    { text = "is nil",
      Plain = " == nil ",
      AccelStr = "A+3" },
    -- 5 -- table special functions
    { text = "5", Label = true },
    { text = "t. insert",
      Macro = "table.insert(, )@Left@3",
      AccelStr = "5" },
    { text = "t. remove",
      Macro = "table.remove()@Left",
      AccelStr = "S+5" },
    { text = "t. sort",
      Macro = "table.sort()@Left",
      AccelStr = "C+5" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+5" },

  }, -- Items

} --- mInsert

---------------------------------------- Data
local Data = {

  Menu = {
    text = L.TemplateInsert,
    Items = { mInsert },

  },

  ["Insert"] = mInsert,

} --- Data

return Data
--------------------------------------------------------------------------------
