--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Scripts for Editor.
  -- Скрипты для редактора.
--]]
--------------------------------------------------------------------------------

local pairs = pairs
local unpack = unpack

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local strings = require 'context.utils.useStrings'
local locale = require 'context.utils.useLocale'

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"
local farEdit = require "Rh_Scripts.Utils.Editor"

local farBlock = farEdit.Block
local farSelect = farEdit.Selection

local RedrawAll = farUt.RedrawAll

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "EScripts",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },
} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Internal
local Clear = {
  DeleteAllSpaces = false,
} ---

-- Delete all spaces in selected block.
-- Удаление всех пробелов в выделенном блоке.
function Clear.DeleteAllSpaces ()

  local function DeleteAllSpaces (block) --> (block)
    return farBlock.SubLines(block, "[ ]+", "")
    --return farBlock.SubText(block, "%s+", "") -- DEBUG only
  end --

  return farSelect.Process(false, DeleteAllSpaces)
end ---- DeleteAllSpaces

-- Squeeze space chars in selected block.
-- Сжатие пробельных символов в выделенном блоке.
function Clear.SqueezeSpaceChars ()

  local function DeleteAllSpaces (block) --> (block)
    return farBlock.SubLines(block, "(%s)%s+", "%1")
  end --

  return farSelect.Process(false, DeleteAllSpaces)
end ---- SqueezeSpaceChars

  local BlockTypes = farSelect.Types

-- Delete all (empty or spaced only) lines in selected block.
-- Удаление всех (пустых или с только пробелами) строк в выделенном блоке.
function Clear.DeleteAllEmptys ()
  local Info = farEdit.GetInfo()
  local SelType = BlockTypes[Info.BlockType]
  if SelType ~= "stream" then return end

  local function DeleteAllEmptys (block) --> (block)
    local t = farBlock.DelLines(block, "^[ ]-$", false)
    if not t then return end
    if block[#block] == "" and t[#t] ~= "" then
      t[#t+1] = ""
      t.Count = #t
    end

    return t
  end --

  return farSelect.Process(false, DeleteAllEmptys)
end ---- DeleteAllEmptys

-- Squeeze (empty or with space chars only) lines in selected block.
-- Сжатие (пустых или с только пробельными символовами) в выделенном блоке.
function Clear.SqueezeEmptyLines ()
  local Info = farEdit.GetInfo()
  local SelType = BlockTypes[Info.BlockType]
  if SelType ~= "stream" then return end

  local function SqueezeEmptyLines (block) --> (block)
    -- Очистка строк только с пробельными символами
    local t = farBlock.SubLines(block, "^%s-$", "")
    if not t then return end

    return farBlock.SubText(t, "(\n\n)\n+", "%1")
  end --

  return farSelect.Process(false, SqueezeEmptyLines)
end ---- SqueezeEmptyLines

---------------------------------------- Clear
local mClear = {
  text = L.LuaClearText,
  Area = "editor",

  Items = {
    { text = L.LuaClearSqueezeSpaceChars,
      Function = Clear.SqueezeSpaceChars, },
    { text = L.LuaClearDeleteAllSpaces,
      Function = Clear.DeleteAllSpaces, },
    { text = L.LuaClearSqueezeEmptyLines,
      Function = Clear.SqueezeEmptyLines, },
    { text = L.LuaClearDeleteAllEmptys,
      Function = Clear.DeleteAllEmptys, },
  } ---
} --- mClear

---------------------------------------- Truncate
local Trunc = require "Rh_Scripts.Editor.VoidTruncate"

local DoTrunc = {}
for k, f in pairs(Trunc) do
  DoTrunc[k] = function ()
    f()
    return RedrawAll()
  end
end --

local mTruncate = {
  text = L.LuaTruncateVoid,
  Items = {
    { text = L.LuaTruncCurLine,
      Function = DoTrunc.TruncateLine, },
    { text = L.LuaTruncAllLines,
      Function = DoTrunc.TruncateText, },
    { text = L.LuaTruncEndLines,
      Function = DoTrunc.TruncateFile, },
    { text = L.LuaTruncFileText,
      Function = Trunc.TruncateFileText, },
  } ---
} --- mTruncate

---------------------------------------- CharChange
local CharChange = {
  Typos = true,
  Typer = true,
  Super = true,
  Suber = true,
  Refer = true,
} --- CharChange

CharChange.Typos = {
  -- Математика:
  ['<>']    = '≠', ['=/']   = '≠', ['==']   = '≡', ['==/']  = '≢',
  ['~~']    = '≈', ['~~/']  = '≉', ['~=']   = '≅', ['~=/']  = '≆',
  ['=<']    = '≤', ['=</']  = '≰', ['>=']   = '≥', ['>=/']  = '≱',
  ['~<']    = '≲', ['~</']  = '≴', ['>~']   = '≳', ['>~/']  = '≵',
  ['+-']    = '±', ['-+']   = '∓',
  ['oo']    = '∞', ['o/']   = '∅',

  ['(=)']   = '⊜',
  ['(+)']   = '⊕', ['(-)']  = '⊖', ['(*)']  = '⊛', ['(/)']  = '⊘',
  ['(⋅)']   = '⊙', ['(×)']  = '⊗', ['(∕)']  = '⊘', ['(⁄)']  = '⊘',
  ['(·)']   = '⊙', ['(¤)']  = '⊚', ['(—)']  = '⊝', ['(–)']  = '⊝',
  ['[+]']   = '⊞', ['[-]']  = '⊟', ['[⋅]']  = '⊡', ['[×]']  = '⊠',

  -- Стрелки:
  ['->']    = '→', ['|->']  = '↦', ['<-']   = '←', ['<-|']  = '↤',
  ['|^']    = '↑', ['_|^']  = '↥', ['#|']   = '↓', ['#|‾']  = '↧',
  -- Химия:
  ['\\=\\'] = '⇌', ['/=/']  = '⇋',
  ['--\\']  = '⇀', ['--/']  = '⇁', ['|\\']  = '↾', ['/|']   = '↿',
  ['\\--']  = '↽', ['/--']  = '↼', ['\\|']  = '⇃', ['|/']   = '⇂',

  -- Текст:
  ["'"]     = 'ʼ',   ["''"]   = 'ʻ',
  ['...']   = '…',   [',..']  = ',…',
  ['!..']   = '!…',  ['?..']  = '?…',
  ['..!']   = '…!',  ['..?']  = '…?',

  -- Греческие буквы:
  _a = 'α', _b = 'β', _c = 'χ', _d = 'δ', _e = 'ε', _f = 'φ',
  _g = 'γ', _h = 'η', _i = 'ι', _j = 'ϕ', _k = 'κ', _l = 'λ',
  _m = 'μ', _n = 'ν', _o = 'ο', _p = 'π', _q = 'θ', _r = 'ρ', _s = 'σ',
  _t = 'τ', _u = 'υ', _v = 'ϖ', _w = 'ω', _x = 'ξ', _y = 'ψ', _z = 'ζ',

  _A = 'Α', _B = 'Β', _C = 'Χ', _D = 'Δ', _E = 'Ε', _F = 'Φ',
  _G = 'Γ', _H = 'Η', _I = 'Ι', _J = 'ϕ', _K = 'Κ', _L = 'Λ',
  _M = 'Μ', _N = 'Ν', _O = 'Ο', _P = 'Π', _Q = 'Θ', _R = 'Ρ', _S = 'Σ',
  _T = 'Τ', _U = 'Υ', _V = 'ϐ', _W = 'Ω', _X = 'Ξ', _Y = 'Ψ', _Z = 'Ζ',

  ['_a~'] = ' ', ['_b~'] = ' ', ['_c~'] = ' ', ['_d~'] = 'ϯ',
  ['_e~'] = 'ϵ', ['_f~'] = 'ϥ', ['_g~'] = 'ϫ', ['_h~'] = 'ϩ',
  ['_i~'] = 'ϳ', ['_j~'] = 'ϰ', ['_k~'] = 'ϗ', ['_l~'] = 'ϡ',
  ['_m~'] = 'ϻ', ['_n~'] = 'ϟ', ['_o~'] = 'ϙ', ['_p~'] = 'ϸ',
  ['_q~'] = ' ', ['_r~'] = 'ϱ', ['_s~'] = 'ς', ['_t~'] = 'ϲ',
  ['_u~'] = 'ϒ', ['_v~'] = 'ϭ', ['_w~'] = 'ϣ', ['_x~'] = 'ϝ',
  ['_y~'] = ' ', ['_z~'] = 'ϛ',

  ['_a~'] = ' ', ['_b~'] = ' ', ['_c~'] = ' ', ['_d~'] = 'Ϯ',
  ['_e~'] = '϶', ['_f~'] = 'Ϥ', ['_g~'] = 'Ϫ', ['_h~'] = 'Ϩ',
  ['_i~'] = ' ', ['_j~'] = 'ϴ', ['_k~'] = 'Ϗ', ['_l~'] = 'Ϡ',
  ['_m~'] = 'Ϻ', ['_n~'] = 'Ϟ', ['_o~'] = 'Ϙ', ['_p~'] = 'Ϸ',
  ['_q~'] = ' ', ['_r~'] = 'ϼ', ['_s~'] = 'Ͻ', ['_t~'] = 'Ϲ',
  ['_u~'] = ' ', ['_v~'] = 'Ϭ', ['_w~'] = 'Ϣ', ['_x~'] = 'Ϝ',
  ['_y~'] = ' ', ['_z~'] = 'Ϛ',

  ["_a'"] = 'ά', ["_e'"] = 'έ', ["_h'"] = 'ή',
  ["_i'"] = 'ί', ["_o'"] = 'ό', ["_u'"] = 'ύ', ["_w'"] = 'ώ',
  ['_i:'] = 'ϊ', ['_ϋ:'] = 'ϋ',

  ["_A'"] = 'Ά', ["_E'"] = 'Έ', ["_H'"] = 'Ή',
  ["_I'"] = 'Ί', ["_O'"] = 'Ό', ["_U'"] = 'Ύ', ["_W'"] = 'Ώ',
  ['_I:'] = 'Ϊ', ['_Ϋ:'] = 'Ϋ',
} -- Typos

-- Группировка по длине ключа.
-- Grouping by key length.
do
  local Typer = {}
  CharChange.Typer = Typer
  local Typos = CharChange.Typos

  local makeplain = strings.makeplain

  local max = 0

  for k, v in pairs(Typos) do
    local len = k:len()
    if max < len then max = len end

    if Typer[len] == nil then Typer[len] = {} end

    Typer[len][makeplain(k)] = v
  end -- for

  Typer[0] = max
end --

CharChange.Super = {
  i = 'ⁱ', j = 'ʲ', k = 'ᵏ', l = 'ˡ', m = 'ᵐ', n = 'ⁿ',
  ['1'] = '¹', ['2'] = '²', ['3'] = '³', ['4'] = '⁴', ['5'] = '⁵',
  ['6'] = '⁶', ['7'] = '⁷', ['8'] = '⁸', ['9'] = '⁹', ['0'] = '⁰',
  ['+'] = '⁺', ['-'] = '⁻', ['='] = '⁼', ['('] = '⁽', [')'] = '⁾',
  ['₁'] = '¹', ['₂'] = '²', ['₃'] = '³', ['₄'] = '⁴', ['₅'] = '⁵',
  ['₆'] = '⁶', ['₇'] = '⁷', ['₈'] = '⁸', ['₉'] = '⁹', ['₀'] = '⁰',
  ['₊'] = '⁺', ['₋'] = '⁻', ['₌'] = '⁼', ['₍'] = '⁽', ['₎'] = '⁾',
} -- Super

CharChange.Suber = {
  i = 'ᵢ', j = 'ⱼ', k = 'ₖ', l = 'ₗ', m = 'ₘ', n = 'ₙ',
  ['1'] = '₁', ['2'] = '₂', ['3'] = '₃', ['4'] = '₄', ['5'] = '₅',
  ['6'] = '₆', ['7'] = '₇', ['8'] = '₈', ['9'] = '₉', ['0'] = '₀',
  ['+'] = '₊', ['-'] = '₋', ['='] = '₌', ['('] = '₍', [')'] = '₎',
  ['¹'] = '₁', ['²'] = '₂', ['³'] = '₃', ['⁴'] = '₄', ['⁵'] = '₅',
  ['⁶'] = '₆', ['⁷'] = '₇', ['⁸'] = '₈', ['⁹'] = '₉', ['⁰'] = '₀',
  ['⁺'] = '₊', ['⁻'] = '₋', ['⁼'] = '₌', ['⁽'] = '₍', ['⁾'] = '₎',
} -- Suber

CharChange.Refer = {
  ['1'] = '¹', ['2'] = '²', ['3'] = '³', ['4'] = '⁴', ['5'] = '⁵',
  ['6'] = '⁶', ['7'] = '⁷', ['8'] = '⁸', ['9'] = '⁹', ['0'] = '⁰',
  ['+'] = '⁺', ['-'] = '⁻', ['='] = '⁼', ['('] = '⁽', [')'] = '⁾',
  ['@'] = '˚', ['^'] = '†', ['#'] = '‡', ['<'] = 'ʿ', ['>'] = 'ʾ',
} -- Refer

local ChangeChar = {
  default = function (Table) --> (function)
    local Table = Table
    return function (block) --> (block)
             return farBlock.SubLines(block, ".",
                                      function (s)
                                        return Table[s] or s
                                      end)
           end
  end, -- default
  Typer = function (Table) --> (function)
    local Table = Table
    --logShow(Table)
    return function (block) --> (block)
             local block = block
             for k = Table[0], 1, -1 do
               local t = Table[k]
               --logShow(t)
               if t then
                 --logShow(block)
                 for k, v in pairs(t) do
                   block = farBlock.SubLines(block, k, v)
                 end
               end
             end
             return block
           end -- function
  end, -- Typer
} --- ChangeChar

local function DoChangeChar (Name) --> (function)

  local Table = CharChange[Name]
  if type(Table) ~= 'table' then return end

  local function Change ()
    local DoChange = (ChangeChar[Name] or ChangeChar.default)(Table)
    return farSelect.Process(false, DoChange)
  end ---- Change

  return Change
end -- DoChangeChar

local mChangeChar = {
  text = L.LuaChangeChar,
  Items = {
    { text = L.LuaChangeCharTyper,
      Function = DoChangeChar"Typer", },
    { text = "", separator = true, },
    { text = L.LuaChangeCharSuper,
      Function = DoChangeChar"Super", },
    { text = L.LuaChangeCharSuber,
      Function = DoChangeChar"Suber", },
    { text = L.LuaChangeCharRefer,
      Function = DoChangeChar"Refer", },
  } ---
} --- mChangeChar

---------------------------------------- Items/Menu
local mScripts = {
  text = L.LuaScripts,
  --Title = L.LuaScripting,
  Items = {
    mClear,     -- Чистка текста
    mTruncate,  -- Усечение текста
    mChangeChar,-- Изменение символов
  } -- Items
} --- mScripts

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.LuaScripts,
    Items = { mScripts },
    --Items = { Sep, Scripts },
  },
  --["Editor Scripts"] = mScripts,
} ---

return Data
--------------------------------------------------------------------------------
