--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Scripts for Editor.
  -- Скрипты для редактора.
--]]
--------------------------------------------------------------------------------

local unpack = unpack

----------------------------------------
--local context = context
local logShow = context.ShowInfo

local locale = require 'context.utils.useLocale'

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"
local farEdit = require "Rh_Scripts.Utils.Editor"

local farBlock = farEdit.Block
local farSelect = farEdit.Selection

local RedrawAll = farUt.RedrawAll

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "EScripts",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },
} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Internal
local Clear = {
  DeleteAllSpaces = false,
} ---

-- Delete all spaces in selected block.
-- Удаление всех пробелов в выделенном блоке.
function Clear.DeleteAllSpaces ()

  local function DeleteAllSpaces (block) --> (block)
    return farBlock.SubLines(block, "[ ]+", "")
    --return farBlock.SubText(block, "%s+", "") -- DEBUG only
  end --

  return farSelect.Process(false, DeleteAllSpaces)
end ---- DeleteAllSpaces

-- Squeeze space chars in selected block.
-- Сжатие пробельных символов в выделенном блоке.
function Clear.SqueezeSpaceChars ()

  local function DeleteAllSpaces (block) --> (block)
    return farBlock.SubLines(block, "(%s)%s+", "%1")
  end --

  return farSelect.Process(false, DeleteAllSpaces)
end ---- SqueezeSpaceChars

  local BlockTypes = farSelect.Types

-- Delete all (empty or spaced only) lines in selected block.
-- Удаление всех (пустых или с только пробелами) строк в выделенном блоке.
function Clear.DeleteAllEmptys ()
  local Info = farEdit.GetInfo()
  local SelType = BlockTypes[Info.BlockType]
  if SelType ~= "stream" then return end

  local function DeleteAllEmptys (block) --> (block)
    local t = farBlock.DelLines(block, "^[ ]-$", false)
    if not t then return end
    if block[#block] == "" and t[#t] ~= "" then
      t[#t+1] = ""
      t.Count = #t
    end

    return t
  end --

  return farSelect.Process(false, DeleteAllEmptys)
end ---- DeleteAllEmptys

-- Squeeze (empty or with space chars only) lines in selected block.
-- Сжатие (пустых или с только пробельными символовами) в выделенном блоке.
function Clear.SqueezeEmptyLines ()
  local Info = farEdit.GetInfo()
  local SelType = BlockTypes[Info.BlockType]
  if SelType ~= "stream" then return end

  local function SqueezeEmptyLines (block) --> (block)
    -- Очистка строк только с пробельными символами
    local t = farBlock.SubLines(block, "^%s-$", "")
    if not t then return end

    return farBlock.SubText(t, "(\n\n)\n+", "%1")
  end --

  return farSelect.Process(false, SqueezeEmptyLines)
end ---- SqueezeEmptyLines

---------------------------------------- Clear
local mClear = {
  text = L.LuaClearText,
  Area = "editor",

  Items = {
    { text = L.LuaClearSqueezeSpaceChars,
      Function = Clear.SqueezeSpaceChars, },
    { text = L.LuaClearDeleteAllSpaces,
      Function = Clear.DeleteAllSpaces, },
    { text = L.LuaClearSqueezeEmptyLines,
      Function = Clear.SqueezeEmptyLines, },
    { text = L.LuaClearDeleteAllEmptys,
      Function = Clear.DeleteAllEmptys, },
  } ---
} --- mClear

---------------------------------------- Truncate
local Trunc = require "Rh_Scripts.Editor.VoidTruncate"

local DoTrunc = {}
for k, f in pairs(Trunc) do
  DoTrunc[k] = function ()
    f()
    return RedrawAll()
  end
end --

local mTruncate = {
  text = L.LuaTruncateVoid,
  Items = {
    { text = L.LuaTruncCurLine,
      Function = DoTrunc.TruncateLine, },
    { text = L.LuaTruncAllLines,
      Function = DoTrunc.TruncateText, },
    { text = L.LuaTruncEndLines,
      Function = DoTrunc.TruncateFile, },
    { text = L.LuaTruncFileText,
      Function = Trunc.TruncateFileText, },
  } ---
} --- mTruncate

---------------------------------------- CharScript
local CharScript = {
} --- CharScript

local CharSuper = {
  ['1'] = '¹', ['2'] = '²', ['3'] = '³', ['4'] = '⁴', ['5'] = '⁵',
  ['6'] = '⁶', ['7'] = '⁷', ['8'] = '⁸', ['9'] = '⁹', ['0'] = '⁰',
  ['+'] = '⁺', ['-'] = '⁻', ['='] = '⁼', ['('] = '⁽', [')'] = '⁾',
  i = 'ⁱ', j = 'ʲ', k = 'ᵏ',
} --- CharSuper

local CharSuber = {
  ['1'] = '₁', ['2'] = '₂', ['3'] = '₃', ['4'] = '₄', ['5'] = '₅',
  ['6'] = '₆', ['7'] = '₇', ['8'] = '₈', ['9'] = '₉', ['0'] = '₀',
  ['+'] = '₊', ['-'] = '₋', ['='] = '₌', ['('] = '₍', [')'] = '₎',
  i = 'ᵢ', j = 'ⱼ', k = 'ₖ',
} --- CharSuber

function CharScript.Super ()

  local function _Super (block) --> (block)
    return farBlock.SubLines(block, ".",
                             function (s) return CharSuper[s] or s end)
  end --

  return farSelect.Process(false, _Super)
end ---- Super

function CharScript.Suber ()

  local function _Suber (block) --> (block)
    return farBlock.SubLines(block, ".",
                             function (s) return CharSuber[s] or s end)
  end --

  return farSelect.Process(false, _Suber)
end ---- Suber

local mCharScript = {
  text = L.LuaCharScript,
  Items = {
    { text = L.LuaCharScriptSuper,
      Function = CharScript.Super, },
    { text = L.LuaCharScriptSuber,
      Function = CharScript.Suber, },
  } ---
} --- mCharScript

---------------------------------------- Items/Menu
local mScripts = {
  text = L.LuaScripts,
  --Title = L.LuaScripting,
  Items = {
    mClear,     -- Чистка текста
    mTruncate,  -- Усечение текста
    mCharScript,-- Индекс текста
  } -- Items
} --- mScripts

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.LuaScripts,
    Items = { mScripts },
    --Items = { Sep, Scripts },
  },
  --["Editor Scripts"] = mScripts,
} ---

return Data
--------------------------------------------------------------------------------
