--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Scripts for Editor.
  -- Скрипты для редактора.
--]]
--------------------------------------------------------------------------------

----------------------------------------
--local context = context

local locale = require 'context.utils.useLocale'

----------------------------------------
local farUt = require "Rh_Scripts.Utils.Utils"
local farEdit = require "Rh_Scripts.Utils.Editor"

local RedrawAll = farUt.RedrawAll

----------------------------------------
--[[
local dbg = require "context.utils.useDebugs"
local logShow = dbg.Show
--]]

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "EScripts",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },
} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- local
local farSelect = farEdit.Selection

local unpack = unpack

local function EnquoteText (Args, Cfg)
  return farSelect.Enquote(unpack(Args))
end ----

local function DequoteText (Args, Cfg)
  return farSelect.Dequote(unpack(Args))
end ----

local farBlock = farEdit.Block

local function RequoteText (Args, Cfg)

  local function Requote (block)
    if block == nil then
      if not farSelect.Dequote(unpack(Args.dequote)) then return end
      return farSelect.Enquote(unpack(Args.enquote))
    end

    local block = farBlock.Dequote(block, unpack(Args.dequote))
    if not block then return end

    return farBlock.Enquote(block, unpack(Args.enquote))
  end --

  return farSelect.Process(true, Requote)
end ---- RequoteText
---------------------------------------- Separator
--[[
local mSep = {
  separator = true,
} ---
--]]

---------------------------------------- Enquote
-- Quotes:
-- '|'          Ctrl'
-- "|"          CtrlShift'
-- ‹|›          Ctrl;           guillemets or angular quote brackets
-- «|»          CtrlShift;      guillemets or angular quote brackets
-- --
-- ‘|’
-- “|”
-- „|“

-- Brackets:
-- [|]          Ctrl[           square brackets, closed brackets
-- {|}          CtrlShift[      braces, curly brackets
-- (|)          Ctrl]           parentheses, round brackets, curved brackets
-- --
-- <|>          Ctrl,           inequality signs, broken brackets
-- ⟨|⟩          CtrlAlt,        chevrons, pointy brackets, angle brackets
-- /|/          Ctrl/           slash brackets
-- \|\          CtrlShift/      backslash brackets

-- Comments:
-- { | }        CtrlAltShift[
-- (*|*)        CtrlShift]
-- /* | */      CtrlAltShift]
-- --
-- <!-- | -->
-- --[[ | ]]--
-- --
-- --

-- Markers:
-- |||          CtrlAltShift1
-- --
-- #|#          CtrlAltShift3
-- $|$          CtrlAltShift4
-- %|%          CtrlAltShift5
-- ^|^          CtrlAltShift6
-- --
-- *|*          CtrlAltShift8

-- `|`          CtrlAlt`
-- ~|~          CtrlAltShift`
-- -|-
-- _|_
-- +|+
-- ‾|‾
-- --
-- ¤|¤          CtrlAltShift0

-- Specials:
-- "|" cleared  CtrlAlt'
-- «|» cleared  CtrlAlt;

local mItems = {}
do
  local Separator = { separator = true }
  local QuoteMarks = {
    { text = L.LuaEnquoteQuotes,
      Label = true, },
    { hot = "'", left = "'", right = "'", },
    { hot = '"', left = '"', right = '"', },
    { hot = ";", left = "‹", right = "›", },
    { hot = ":", left = "«", right = "»", },
    Separator,
    { hot = "1", left = "‘", right = "’", },
    { hot = "2", left = "“", right = "”", },
    { hot = "3", left = "„", right = "“", },
    --Separator,

    { text = L.LuaEnquoteBrackets,
      Label = true, },
    { hot = "[", left = "[", right = "]", },
    { hot = "{", left = "{", right = "}", },
    { hot = "(", left = "(", right = ")", },
    Separator,
    --Separator,
    --Separator,
    --Separator,
    --Separator,
    --Separator,

    --{ text = L.LuaEnquoteOthers,
    --  Label = true, },
    { hot = "<", left = "<", right = ">", },
    { hot = ">", left = "⟨", right = "⟩", },
    { hot = "/", left = "/", right = "/", },
    { hot ="\\", left ="\\", right ="\\", },
    --Separator,
    --Separator,
    --Separator,
    --Separator,

    { text = L.LuaEnquoteComments,
      Label = true, },
    { hot = "data", pad = "   ", left = "{ ", right = " }", },
    { hot = "pas ", pad = "   ", left = "(*", right = "*)", },
    { hot = "c++ ", pad = "  ", left = "/* ", right = " */", },
    Separator,
    { hot = "html", pad = " ", left = "<!--", right = "-->", },
    { hot = "lua ", pad = "", left = "--[[ ", right = " ]]--", },
    --{ hot = "lua ", pad = "", left = "--[[",  right = "--]]", },
    --[=[
    { hot = "d", left = "{ ", right = " }", note = "    (data)", },
    { hot = "p", left = "(*", right = "*)", note = "    (pascal)", },
    { hot = "c", left = "/* ", right = " */", note = "  (c/c++)", },
    { hot = "h", left = "<!--", right = "-->", note = " (x/html)", },
    { hot = "l", left = "--[[ ", right = " ]]--", note = " (lua)", },
    --]=]
    Separator,
    Separator,
    --Separator,

    { text = L.LuaEnquoteMarkers,
      Label = true, },
    { hot = "|", left = "|", right = "|", },
    Separator,
    { hot = "#", left = "#", right = "#", },
    { hot = "$", left = "$", right = "$", },
    { hot = "%", left = "%", right = "%", },
    { hot = "^", left = "^", right = "^", },
    Separator,
    { hot = "*", left = "*", right = "*", },
    --Separator,

    { text = L.LuaEnquoteMarkers,
      Label = true, },
    { hot = "`", left = "`", right = "`", },
    { hot = "~", left = "~", right = "~", },
    --Separator,
    { hot = "-", left = "-", right = "-", },
    { hot = "_", left = "_", right = "_", },
    { hot = "=", left = "+", right = "+", },
    { hot = "+", left = "‾", right = "‾", },
    Separator,
    { hot = "o", left = "¤", right = "¤", },
    -- [[
    { text = L.LuaEnquoteSpecials,
      Label = true, },
    { hot = "q",
      note = L.LuaQuoteReplace,
      Function = RequoteText,
      dequote = { 1, 1, true },
      enquote = { '"', '"', true },
    },
    { hot = "w",
      note = L.LuaQuoteReplace,
      Function = RequoteText,
      dequote = { 1, 1, true },
      enquote = { '«', '»', true },
    },
    --]]
  } ---

  local format = string.format
  local QuoteTextFmt = "&%s - %s%s|%s%s"

for k = 1, #QuoteMarks do
  local v = QuoteMarks[k]
  local t
  if v.hot then
    if not v.Function then
      t = {
        text = format(QuoteTextFmt, v.hot,
                      v.pad or "", v.left,
                      v.right, v.note or ""),
        Function = EnquoteText,
        Arguments = { v.left, v.right, true },
      } ---
    else
      local w = v.enquote
      t = {
        text = format(QuoteTextFmt, v.hot,
                      v.pad or "", w[1],
                      w[2], v.note or ""),
        Function = v.Function,
        Arguments = v,
      } ---
    end
  else
    t = v
  end
  mItems[#mItems + 1] = t
end --

--logShow(mItems, "mEnquote", "", { tnaming = false, astable = true })

end -- do

local mEnquote = {
  text = L.LuaEnquote,
  -- [[
  MenuView = "RectMenu",
  Props = {
    RectMenu = {
      Rows = 9,
      Order = "V",
      Fixed = { HeadRows = 1, HeadCols = 0 },
    }, -- RectMenu
  }, -- Props
  CfgData = { UMenu = { TextNamedKeys = false } },
  --]]

  Items = mItems,
} --- mEnquote

---------------------------------------- Dequote
local mDequote = {
  text = L.LuaDequote,

  Items = {
    { text = L.LuaDequoteSingle,
      Function = DequoteText,
      Arguments = { 1, 1, true },
    },
    { text = L.LuaDequoteDouble,
      Function = DequoteText,
      Arguments = { 2, 2, true },
    },
  } ---
} --- mDequote

---------------------------------------- Quote
local mQuote = {
  text = L.LuaQuoteText,
  Area = "editor",

  Items = {
    mEnquote,   -- Закавычивание
    mDequote    -- Раскавычивание
  } ---
} --- mQuote

---------------------------------------- Truncate
local Truncate = (require "Rh_Scripts.Editor.VoidTruncate").Truncate

local DoTrunc = {}
for k, f in pairs(Truncate) do
  DoTrunc[k] = function ()
    f()
    return RedrawAll()
  end
end --

local mTruncate = {
  text = L.LuaTruncateVoid,
  Items = {
    { text = L.LuaTruncCurLine,
      Function = DoTrunc.Line },
    { text = L.LuaTruncAllLines,
      Function = DoTrunc.Text },
    { text = L.LuaTruncEndLines,
      Function = DoTrunc.File },
    { text = L.LuaTruncFileText,
      Function = Truncate.FileText },
  } ---
} --- mTruncate

---------------------------------------- ----
local mScripts = {
  text = L.LuaScripts,
  --Title = L.LuaScripting,
  Items = {
    --mQuote,     -- Кавычки/скобки
    mEnquote,   -- Закавычивание
    mDequote,   -- Раскавычивание
    mTruncate,  -- Усечение текста
  } -- Items
} --- mScripts

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.LuaScripts,
    Items = { mScripts },
    --Items = { Sep, Scripts },
  },
  --["Editor Scripts"] = Scripts,
} ---

return Data
--------------------------------------------------------------------------------
