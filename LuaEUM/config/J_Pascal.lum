--[[ LuaEUM ]]--

----------------------------------------
--[[ description:
  -- Template Insert: pascal.
  -- Вставка шаблона: pascal.
--]]
--------------------------------------------------------------------------------
local _G = _G

----------------------------------------
--local context = context

local locale = require 'context.utils.useLocale'

--------------------------------------------------------------------------------

---------------------------------------- Locale
local Custom = {
  label = "TplIns",
  name = "lum",
  path = "Rh_Scripts.LuaEUM.config.",
  locale = { kind = 'require' },
} ---
local L, e1, e2 = locale.localize(Custom)
if L == nil then
  return locale.showError(e1, e2)
end

---------------------------------------- Lines
local line_class = ''

local line_len = 78
local line_hymin = '{'..('-'):rep(line_len)..'}'
local line_equal = '{'..('='):rep(line_len)..'}'

---------------------------------------- ----
local mInsert = {
  text  = L.TplInsItem,
  Title = L.TemplateInsert,
  MenuView = "RectMenu",
  Props = {
    RectMenu = { Cols = 5,
      Fixed = { HeadRows = 1, HeadCols = 1 },
    }, -- RectMenu
  },
  CfgData = { UMenu = { TextNamedKeys = false } },

  Items = {
    -- Header --
    { text = " ",         Label = true },
    { text = "   <a>   ", Label = true },
    { text = "Shift+<a>", Label = true },
    { text = " Ctrl+<a>", Label = true },
    { text = " Alt+<a> ", Label = true },
    -- - -- ???
    { text = "-", Label = true },
    { text = "- (sep)",
      Plain = line_hymin,
      AccelStr = "-" },
    { text = "= (sep)",
      Plain = line_equal,
      AccelStr = "S+-" },
    { text = "{ block }",
      Macro = "{  }@Left@2",
      AccelStr = "C+-" },
    { text = "{= class =}",
      Macro = "{=  =}@Left@3",
      AccelStr = "A+-" },
    -- A -- ???
    { text = "A", Label = true },
    { text = "abstract;",
      Plain = " abstract;",
      AccelStr = "a" },
    { text = "array 2D",
      --Hint = "array [,] of", -- TEST: Longest hint:
      --Hint = "array [,] of qwertyuiopasdfghjklzxcvbnmqqqqq1234567890asdfgh",
      Macro = "array [@Here, ] of ;@Back",
      AccelStr = "A" },
    { text = "array of",
      Plain = " array of ",
      AccelStr = "C+A" },
    { text = "raise",
      Macro = "raise @Here.Create();@Back",
      AccelStr = "A+A" },
    -- B -- block / repeat-until / break
    { text = "B", Label = true },
    { text = "block",
      Macro = "begin@IndEnter  @Here@IndEnterend;@Back",
      AccelStr = "b" },
    { text = "full block",
      Macro = "begin@IndEnter  //@IndEnter@Left@2end; // @",
      AccelStr = "B" },
    { text = "rep-until",
      Macro = "repeat@Here@IndEnteruntil ;@Back@IndEnter  @",
      AccelStr = "C+B" },
    { text = "break",
      Plain = "break;",
      AccelStr = "A+B" },
    -- C -- case-of / continue
    { text = "C", Label = true },
    { text = "case",
      Macro = "case @Here of@IndEnterend;@Back",
      AccelStr = "c" },
    { text = "full case",
      Macro = "case @Here of@IndEnter  else@IndEnter@Left@2end;@Back",
      AccelStr = "C" },
    { text = "cdecl;",
      Plain = " cdecl;",
      AccelStr = "C+C" },
    { text = "continue",
      Plain = "continue;",
      AccelStr = "A+C" },
    -- D -- for-do
    { text = "D", Label = true },
    { text = "for-do",
      Macro = "for @Here :=  to  do ;@Back",
      AccelStr = "d" },
    { text = "full for",
      Macro = "for @Here :=  to  do begin@IndEnterend;@Back",
      AccelStr = "D" },
    { text = "down for",
      Macro = "for @Here :=  downto  do begin@IndEnterend;@Back",
      AccelStr = "C+D" },
    { text = "dynamic;",
      Plain = " dynamic;",
      AccelStr = "A+D" },
    -- E -- except / error
    { text = "E", Label = true },
    { text = "except",
      Macro = "except @Here end;@Back",
      AccelStr = "e" },
    { text = "finally",
      Macro = "finally @Here end;@Back",
      AccelStr = "E" },
    { text = "on-do",
      Macro = "on @Here do;@Back",
      AccelStr = "C+E" },
    { text = "Error",
      Plain = "Error",
      AccelStr = "A+E" },
    -- F -- function
    { text = "F", Label = true },
    { text = "function",
      Plain = "function ",
      AccelStr = "f" },
    { text = "full func",
      Macro = "function @Here ():;@IndEnterbegin@IndEnter  //@IndEnter@Left@2end; //@Back",
      AccelStr = "F" },
    { text = "small func",
      Macro = "function @Here ():;@IndEnterbegin@IndEnterend;@Back",
      AccelStr = "C+F" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "A+F" },
    -- I -- if-then/else
    { text = "I", Label = true },
    { text = "if-then",
      Macro = "if @Here then ;@Back",
      AccelStr = "i" },
    { text = "if-else",
      Macro = "if @Here then@IndEnterelse ;@Back",
      AccelStr = "I" },
    { text = "full if",
      Macro = "if @Here then begin@IndEnterend@IndEnterelse begin@IndEnterend;@Back",
      AccelStr = "C+I" },
    { text = "interface",
      Plain = "interface",
      AccelStr = "A+I" },
    -- J -- if-then-do
    { text = "J", Label = true },
    { text = "if-do",
      Macro = "if @Here then begin@IndEnterend;@Back",
      AccelStr = "j" },
    { text = "full then",
      Macro = "if @Here then begin@IndEnterend else ;@Back",
      AccelStr = "J" },
    { text = "Index",
      Plain = "Index",
      AccelStr = "C+J" },
    { text = "inherited",
      Plain = "inherited ",
      AccelStr = "A+J" },
    -- K -- access / scope
    { text = "K", Label = true },
    { text = "private",
      Plain = "private",
      AccelStr = "k" },
    { text = "protected",
      Plain = "protected",
      AccelStr = "K" },
    { text = "public",
      Plain = "public",
      AccelStr = "C+K" },
    { text = "published",
      Plain = "published",
      AccelStr = "A+K" },
    -- L -- nil / long / boolean
    { text = "L", Label = true },
    { text = "nil",
      Plain = "nil",
      AccelStr = "l" },
    { text = "longint",
      Plain = "longint",
      AccelStr = "L" },
    { text = "boolean",
      Plain = "boolean",
      AccelStr = "C+L" },
    { text = "longword",
      Plain = "longword",
      AccelStr = "A+L" },
    -- N -- int / uint / float
    { text = "N", Label = true },
    { text = "integer",
      Plain = "integer",
      AccelStr = "n" },
    { text = "cardinal",
      Plain = "cardinal",
      AccelStr = "N" },
    { text = "extended",
      Plain = "extended",
      AccelStr = "C+N" },
    { text = "message",
      Macro = " message ;@Left",
      AccelStr = "A+N" },
    -- O -- property
    { text = "O", Label = true },
    { text = "property",
      Plain = "property ",
      AccelStr = "o" },
    { text = "full prop",
      Macro = "property @Here read Get write Set;@Back",
      AccelStr = "O" },
    { text = "def-prop",
      Macro = "property @Here read Get write Set default 0;@Back",
      AccelStr = "C+O" },
    { text = "index-prop",
      Macro = "property @Here index 0 read Get write Set;@Back",
      AccelStr = "A+O" },
    -- P -- procedure
    { text = "P", Label = true },
    { text = "procedure",
      Plain = "procedure ",
      AccelStr = "p" },
    { text = "full proc",
      Macro = "procedure @Here ();@IndEnterbegin@IndEnter  //@IndEnter@Left@2end; //@Back",
      AccelStr = "P" },
    { text = "small proc",
      Macro = "procedure @Here ();@IndEnterbegin@IndEnterend;@Back",
      AccelStr = "C+P" },
    { text = "Pointer",
      Plain = "Pointer",
      AccelStr = "A+P" },
    -- Q -- class
    { text = "Q", Label = true },
    { text = "class",
      Macro = " = class(@Here)@IndEnter@Leftend;@Enter@Back",
      AccelStr = "q" },
    { text = "full class",
      Macro = "{= T =}@IndEnter@Here = class()@IndEnter@Leftend; {= T =}@Back",
      AccelStr = "Q" },
    { text = "c. helper",
      Macro = " = class helper for @Here@IndEnter@Leftend;@Enter@Back",
      AccelStr = "C+Q" },
    { text = "class of",
      Macro = " = class of ;@Left",
      AccelStr = "A+Q" },
    -- R -- Result / exit
    { text = "R", Label = true },
    { text = "Result",
      Plain = "Result",
      AccelStr = "r" },
    { text = "",
      --Macro = "",
      separator = true,
      AccelStr = "R" },
    { text = "exit",
      Plain = "exit;",
      AccelStr = "C+R" },
    { text = "reintro;",
      Plain = " reintroduce;",
      AccelStr = "A+R" },
    -- S -- string
    { text = "S", Label = true },
    { text = "string",
      Plain = "string",
      AccelStr = "s" },
    { text = "AnsiString",
      Plain = "AnsiString",
      AccelStr = "S" },
    { text = "WideString",
      Plain = "WideString",
      AccelStr = "C+S" },
    { text = "static;",
      Plain = " static;",
      AccelStr = "A+S" },
    -- T -- try-end
    { text = "T", Label = true },
    { text = "try-e",
      Macro = "try@Here@IndEnterexcept@IndEnterend;@Back@IndEnter  @",
      AccelStr = "t" },
    { text = "try-f",
      Macro = "try@Here@IndEnterfinally@IndEnterend;@Back@IndEnter  @",
      AccelStr = "T" },
    { text = "try-v",
      Macro = "@HereV := T.Create();@IndEntertry@IndEnterfinally@IndEnter  V.Free()@IndEnter@Left@2end;@Back",
      AccelStr = "C+T" },
    { text = "external;",
      Plain = " external;",
      AccelStr = "A+T" },
    -- U -- unit / uses
    { text = "U", Label = true },
    { text = "unit",
      Macro = "unit ;@Left",
      AccelStr = "u" },
    { text = "uses",
      Macro = "uses ;@Left",
      AccelStr = "U" },
    { text = "full uses",
      Macro = "uses@IndEnter  ;@Left",
      AccelStr = "C+U" },
    { text = "program",
      Macro = "program ;@Left",
      AccelStr = "A+U" },
    -- V -- virtual
    { text = "V", Label = true },
    { text = "Value",
      Plain = "Value",
      AccelStr = "v" },
    { text = "virtual;",
      Plain = " virtual;",
      AccelStr = "V" },
    { text = "override;",
      Plain = " override;",
      AccelStr = "C+V" },
    { text = "overload;",
      Plain = " overload;",
      AccelStr = "A+V" },
    -- W -- while-do / with-do
    { text = "W", Label = true },
    { text = "while-do",
      Macro = "while @Here do ;@Back",
      AccelStr = "w" },
    { text = "full while",
      Macro = "while @Here do begin@IndEnterend;@Back",
      AccelStr = "W" },
    { text = "with-do",
      Macro = "with @Here do@Back",
      AccelStr = "CS+W" },
    { text = "full with",
      Macro = "with @Here do begin@IndEnterend;@Back",
      AccelStr = "A+W" },
    -- X -- types
    { text = "X", Label = true },
    { text = "enum",
      Macro = "@Here = (,);@Back",
      AccelStr = "x" },
    { text = "record",
      Macro = "@Here = record@IndEnter@Leftend;@Back",
      AccelStr = "X" },
    { text = "pack-rec",
      Macro = "@Here = packed record@IndEnter@Leftend;@Back",
      AccelStr = "C+X" },
    { text = "array",
      Macro = "array [@Here] of ;@Back",
      AccelStr = "A+X" },
  } -- Items
} --- mInsert

---------------------------------------- Data
local Data = {
  Menu = {
    text = L.TemplateInsert,
    Items = { mInsert },
  },
  ["Insert"] = mInsert,
} ---

return Data
--------------------------------------------------------------------------------
